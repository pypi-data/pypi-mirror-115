Metadata-Version: 2.1
Name: hyc
Version: 3.0.0a2
Summary: UNKNOWN
Home-page: https://github.com/fourlight/hyc
Author: Jiachen Zou
Author-email: 873039943@QQ.com
License: MIT
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3.9
Classifier: Topic :: Scientific/Engineering :: Mathematics
Classifier: Natural Language :: Chinese (Simplified)
Classifier: License :: OSI Approved :: MIT License
Description-Content-Type: text/markdown

# hyc库介绍

## 简介
__名称：hyc库__
> _hyc意为Help you calculate（帮助您计算）_

__版本号：3.0.0α2测试版__
> _本次更新相比于[3.0.0a1测试版](http://pypi.org/project/hyc/3.0.0a1) 稳定性有所提升，但仍有可能存在bug，不过可以保证fraction模块的稳定性_

__本次更新时间：2021年8月7日__

_[点击我跳转到GitHub界面哦~](https://github.com/fourlight/hyc)_

## 更新记录：
_注：测试版可能会存在bug，正式版不会出现bug_
### 3.0.0α2测试版（当前版本，对fraction模块进行测试，并未发现bug）
>* 将fraction()类中加减乘除需要加`[]`的方法进行了优化，变为了直接计算，如下图所示
>> 3.0.0α1测试版 
>>```
>>a = fraction(2, 1)
>>b = fraction(5, 1)
>>a + [b]
>>```
>> 3.0.0α2测试版
>>```
>>a = fraction(2, 1)
>>b = fraction(5, 1)
>>a + b
>>```
### 3.0.0α1测试版（暂未进行测试，不推荐使用）
>* fraction模块代码大重做，移除分数四则运算、约分等内容，添加涵盖四则运算、约分、分数化小数等功能的fraction类
>* 添加参数注释
>* 简介更新
### 2.2.0版本（最新正式版本）
>* 添加介绍
>* 添加“更新记录”
### 2.1.2.post1版本
>* 优化系统稳定性
### 2.1.2版本
>* 优化系统稳定性
### 2.1.1版本
>* 修复显示bug
### 2.1.0版本
>* 删除报错
>* 删除介绍英文
### 2.1.0版本之前
>* 暂无记录

## 下载方式：
### 下载正式版（2.2.0版本）：
```
pip install hyc
```
### 下载测试版（可能存在bug，3.0.0α2版本）：
```
pip install hyc==3.0.0.a2
```
## 导入方式：

### 1.
```
import hyc.模块
```
### 2.
```
from hyc import 模块
```
### 3.
```
from hyc.模块 import *
```

## hyc库内部结构：
```
hyc
├─fraction
│  ├─den_di()
│  └─fraction()类
│      ├─opposide()方法
│      ├─red_fr()方法
│      ├─simp_fr()方法
│      ├─__add__()加法
│      ├─__float__()方法（分数化小数并保留位数）
│      ├─__init__()方法
│      ├─__int__()方法（fraction对象化整数）
│      ├─__mul__()乘法
│      ├─__str__()方法（分数读作）
│      ├─__sub__()减法
│      └─__truediv__()除法
└─num
    ├─factor()
    ├─pri_num()
    ├─per_num()
    ├─even_num()
    ├─lcm()
    ├─hcf()
    ├─pri_fac()
    └─comprime()
```

## 使用方式：

通过调用函数完成您想要达成的效果，具体请看“各函数讲解”

## 各函数讲解： 

### （num模块）

#### 1.factor() 

该函数是用来寻找一个数的所有因数的，请在括号内填入一个数字，该函数就可以找出括号内数字的所有参数
##### 示例
```
print(factor(9))
----------------
控制台
[1, 3, 9]
```


#### 2.per_num()

该函数是用来判断一个数是否为完全数的，请在括号内填入一个数字，该函数返回True或False
##### 示例
```
print(per_num(9))     print(per_num(27)
----------------     ------------------
控制台                 控制台
False                 True
```


#### 3.pri_num() 

该函数是用来判断一个数是否为质数的，请在括号内填入一个数字，该函数返回True或False
##### 示例
```
print(pri_num(9))     print(pri_num(2)
----------------     ------------------
控制台                 控制台
False                 True
```

#### 4.even_num()

该函数是用来判断一个数是否为偶数的，请在括号内填入一个数字，该函数返回True或False
##### 示例
```
print(per_num(9))     print(per_num(28)
-----------------     ------------------
控制台                 控制台
False                 True
```

#### 5.lcm() 

该函数是用来寻找几个数的最小公倍数的，请在括号内填入一个包含两个或以上数字的列表，请勿填入字符串、浮点数
##### 示例
```
print(lcm([5, 9]))
-------------------
控制台
45                    
```

#### 6.hcf() 

该函数是用来寻找几个数的公因数和最大公因数的，请在括号内填入一个包含两个或以上数字的列表，请勿填入字符串、浮点数；该函数会返回两个值，前一个值为两个数所有的公因数列表，后一个值为两个数的最大公因数
##### 示例
```
print(hcf([5, 15]))
-------------------
控制台
[1, 5], 5
```
#### 7.pri_fac() 

该函数是用来分解一个数的质因数的，请在括号内填入一个数字，该函数返回‘括号内的数 = 质因数1 * 质因数2 * ...’字符串
##### 示例
```
print(pri_fac(5))
------------------
控制台
150 = 2*3*5*5              
```

#### 8.coprime() 

该函数是用来该函数是用来判断几个数是否为互质数的，请在括号内填入一个包含两个及以上数字的列表，该函数返回True或False
##### 示例
```
print(coprime([9, 12]))     print(coprime([2, 3])
-----------------------     ---------------------
控制台                       控制台
False                       True
```

### （fraction模块）

#### 请注意：在hyc库里，分数请先用name=fraction(分母,分子)转换name为fraction类型后再使用

#### 9.den_di()
该函数是用来通分的，请在函数内填入一个分数列表，该函数可以将分数列表中的所有分数化为同分母分数
##### 示例
```
a = fraction(5, 2)# 代表五分之二
b = fraction(9, 1)# 代表九分之一
print(den_di(a, b))
--------------------------------
控制台
[45分之18, 45分之5]
```

#### 10.fraction()类 

fraction类是fraction模块中最主要的部分，它会创建一个分数对象，如`a=fraction(5, 2)`就可以创建五分之二这个分数

其中的`__int__()`函数和`__float__()`基本原理相同，都是将分数化为整数（或小数），如
```
a = fraction(4, 2)
print(int(a))# 将4分之2化为整数
-----------------------------
控制台
1
```
> 这段代码，就是将4分之2化为整数，因为4分之2等于0.5，0.5四舍五入等于1，因此返回1

`__float__()`函数与`__int__()`函数的不同点在于`__float__()`函数可以选择四舍五入的位数，比如
```
a = fraction(8, 1)
print(float(a, 2))# 四舍五入到小数点后第二位
---------------------------------------
控制台
0.13
```
> 8分之1等于0.125，四舍五入到百分位（小数点后第二位）是0.13

不过，`__float__()`函数也可以不选择四舍五入的位数，这样就会化为准确值，比如
```
a = fraction(8, 1)
print(float(a))
------------------
控制台
0.125
```

除了`__int__()`和`__float__()`函数，还有`__str__()`函数，用于控制对象的名称，比如`fraction(2, 1)`就是`2分之1`

剩下的`red_fr()`，`simp_fr()`和`opposide()`函数没有什么变化，只是调用方式变为了
```
a = fraction(分母,分子)
a.函数()
```
其余用法与[2.2.0版本](https://pypi.org/project/hyc/2.2.0) 相同

剩下的就是加减乘除四则运算了，相比2.2.0版本，3.0.0α1测试版将`函数名(分数列表)`的调用方式改为了更简单的
```
a = fraction(分母, 分子)
b = fraction(分母, 分子)
c = fraction(分母, 分子)
...

a + [b, c, ...]
```
的方式，当然，示例中的`+`可以替换成`-`，`*`和`/`，但暂时不支持`**`和`//`

混合运算也是可以的
```
a = fraction(分母, 分子)
b = fraction(分母, 分子)
c = fraction(分母, 分子)
...

a + b - c + ...
```
相比于[3.0.0α1测试版](http://pypi.org/project/hyc/3.0.0a1) ，3.0.0α2测试版将用中括号的方法去掉了，改为更直观的直接加减法

## 分数计算：
_如果您觉得hyc库的分数计算太过于麻烦，[请点击这里](http://github.com/fourlight/fra_cal)_

## 希望对您有所帮助


