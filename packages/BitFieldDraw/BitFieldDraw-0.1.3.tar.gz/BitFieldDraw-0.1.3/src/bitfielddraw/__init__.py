"""BitFieldDraw
By Al Sweigart al@inventwithpython.com

A simple module for creating bit field art for strings or screens."""

#from __future__ import print_function  # TODO - chr() in this file doesn't work in python 2 currently.

__version__ = '0.1.3'


import shutil

TOP_BLOCK = chr(9600)
BOTTOM_BLOCK = chr(9604)
FULL_BLOCK = chr(9608)
EMPTY = ' '

EXAMPLES = (
    '(x ^ y) % 5',
    '(x ^ y) % 9',
    '(x ^ y) % 17',
    '(x ^ y) % 33',
    '(x ^ y) % 2',
    '(x ^ y) % 4',
    '(x ^ y) % 8',
    '(x | y) % 7',
    '(x | y) % 17',
    '(x | y) % 29',
    '(x * y) & 64',
    '(x * y) & 24',
    '(x * y) & 47',
    '(x ^ y) < 77',
    '(x ^ y) < 214',
    '(x ^ y) < 120',
    '(x * 2) % y',
    '(x * 64) % y',
    '(x * 31) % y',
    '((x-128) * 64) % (y-128)',
    '(x ^ y) & 32',
    '(x ^ y) & 72',
    '(x ^ y) & 23',
    '((x * y) ** 4) % 7',
    '((x * y) ** 5) % 99',
    '((x * y) ** 9) % 3',
    '(x % y) % 4',
    '40 % (x % y)',
    'x & y',
    'x % y',
    'x & 9',
    '(x & y) & (x ^ y) % 19',
    '((x ^ y) & 32) * ((x ^ y) % 9)',
    '(x * 64) % y * ((x ^ y) < 77)',
)

def main():
    """
    Run through a quick demo of several bit fields generated by different functions.
    """
    try:
        for lambdaStr in EXAMPLES:
            print(getBitFieldStr(lambdaStr))
            print(lambdaStr)
            input('Press Enter to continue...')
    except KeyboardInterrupt:
        pass  # Simply cut the demo short if the user presses Ctrl-C


def _adjustParams(func, left, bottom, width, height, **kwargs):
    """
    Returns what the width and height should be set to depending on the current terminal's size, if no width or height
    is already set.

    :param func: The func parameter. If this is a string, it should be returned as a function object. The 'lambda x, y:' prefix is optional.
    :param width: The desired width. If this is None, the returned width is set to the terminal's width in text cells.
    :param height: The desired height. If this is None, the returned height is set to twice the terminal's height in
    text cells because text cells are twice as tall as they are wide.
    """

    if isinstance(func, str):
        # A vague attempt at mitigating malicious input since func is passed to eval(). Don't rely on this for security.
        if ';' in func or 'import' in func or 'open' in func:
            raise Exception('func argument as a string must only have a lambda funciton')

        if not func.strip().replace(' ', '').lower().startswith('lambdax,y:'):
            func = 'lambda x, y:' + func
        func = eval(func)

    WIDTH, HEIGHT = shutil.get_terminal_size()
    # We can't print to the last column on Windows without it adding a
    # newline automatically, so reduce the width by one:
    WIDTH -= 1
    HEIGHT *= 2  # We'll use squares for creating the height.

    # Handle the shortcut param names:
    if 'w' in kwargs:
        width = kwargs['w']
    if 'h' in kwargs:
        height = kwargs['h']
    if 'x' in kwargs:
        left = kwargs['x']
    if 'y' in kwargs:
        bottom = kwargs['y']


    if width is None:
        width = WIDTH
    if height is None:
        height = HEIGHT

    return func, left, bottom, width, height


def getBitField(func, invert=False, left=0, bottom=0, width=None, height=None, flipx=False, flipy=False, **kwargs):
    """
    Returns a frozenset of (x, y) tuples describing the set bits of the bit field produced by func.

    :param func: A function that accepts integer x and y coordinates, and returns True if this bit in the field should be visible and False if not.
    :param invert: Whether to toggle the return Boolean of func. Defaults to False.
    :param left: The x coordinate of the left edge of the bit field region. Defaults to 0.
    :param bottom: The y coordinate of the bottom edge of the bit field region. Defaults to 0.
    :param width: The desired width. If this is None, the returned width is set to the terminal's width in text cells.
    :param height: The desired height. If this is None, the returned height is set to twice the terminal's height in
    text cells because text cells are twice as tall as they are wide.
    :param flipx: If True, inverts the x coordinates to flip the bit field horizontally. Defaults to False.
    :param flipy: If True, inverts the y coordinates to flip the bit field vertically. Defaults to False.
    """
    func, left, bottom, width, height = _adjustParams(func, left, bottom, width, height, **kwargs)

    canvas = []
    for x in range(width):
        # ix is (the possibly inverted form of) x
        if flipx:
            ix = width - 1 - x
        else:
            ix = x
        for y in range(height):
            try:
                bit = func(x + left, y + bottom)
            except:
                bit = False
            if invert:
                bit = not bit
            if bit:
                # iy is (the possibly inverted form of) y
                if flipy:
                    iy = height - 1 - y
                else:
                    iy = y
                canvas.append((ix, iy))
    return frozenset(canvas)


def getBitFieldStrFromSet(xySet):
    raise NotImplementedError


def getBitFieldImgFromSet(xySet, invert=False, width=None, height=None, fg='white', bg='black', **kwargs):
    """
    Returns a Pillow Image object of the bit field represented by the set of (x, y) coordinates in xySet.

    :param xySet: A set of integer (x, y) coordinates for the image.
    :param fg: The Pillow color string for foreground pixels where func returns a nonzero value. Can be a word like 'red' or RGB value like '#ff0000'. Defaults to 'white'.
    :param bg: The Pillow color string for background pixels where func returns a zero value. Can be a word like 'red' or RGB value like '#ff0000'. Defaults to 'black'.
    """
    try:
        from PIL import Image, ImageDraw, ImageColor
    except:
        raise Exception('The getBitFieldImg() function requires the Pillow module to be installed first.')
    fg = ImageColor.getcolor(fg, 'RGB')
    bg = ImageColor.getcolor(bg, 'RGB')

    # Handle the w and h shortcut parameter names
    if 'w' in kwargs:
        width = kwargs['w']
    if 'h' in kwargs:
        height = kwargs['h']
    if width is None:
        raise Exception('Missing argument for the width or w parameter.')
    if height is None:
        raise Exception('Missing argument for the height or h parameter.')

    im = Image.new('RGB', (width, height), bg)
    draw = ImageDraw.Draw(im)
    pixels = []
    for xy in xySet:
        pixels.append((xy[0], xy[1]))
    draw.point(list(pixels), fill=fg)

    return im




def getBitFieldImg(func, invert=False, left=0, bottom=0, width=None, height=None, flipx=False, flipy=False, fg='white', bg='black', **kwargs):
    """
    Returns a Pillow Image object of the bit field produced by func.

    :param func: A function that accepts integer x and y coordinates, and returns True if this bit in the field should be visible and False if not.
    :param invert: Whether to toggle the return Boolean of func. Defaults to False.
    :param left: The x coordinate of the left edge of the bit field region. Defaults to 0.
    :param bottom: The y coordinate of the bottom edge of the bit field region. Defaults to 0.
    :param width: The desired width. If this is None, the returned width is set to the terminal's width in text cells.
    :param height: The desired height. If this is None, the returned height is set to twice the terminal's height in
    text cells because text cells are twice as tall as they are wide.
    :param flipx: If True, inverts the x coordinates to flip the bit field horizontally. Defaults to False.
    :param flipy: If True, inverts the y coordinates to flip the bit field vertically. Defaults to False.
    :param fg: The Pillow color string for foreground pixels where func returns a nonzero value. Can be a word like 'red' or RGB value like '#ff0000'. Defaults to 'white'.
    :param bg: The Pillow color string for background pixels where func returns a zero value. Can be a word like 'red' or RGB value like '#ff0000'. Defaults to 'black'.
    """
    # TODO - be able to specify None for fg and bg to have transparency.
    try:
        from PIL import Image, ImageDraw, ImageColor
    except:
        raise Exception('The getBitFieldImg() function requires the Pillow module to be installed first.')

    func, left, bottom, width, height = _adjustParams(func, left, bottom, width, height, **kwargs)
    fg = ImageColor.getcolor(fg, 'RGB')
    bg = ImageColor.getcolor(bg, 'RGB')

    im = Image.new('RGB', (width, height), bg)
    draw = ImageDraw.Draw(im)
    pixels = []
    for xy in getBitField(func, invert=invert, left=left, bottom=bottom, width=width, height=height, flipx=flipx, flipy=flipy, **kwargs):
        pixels.append((xy[0] - left, height - (xy[1] - bottom) - 1))
    draw.point(list(pixels), fill=fg)

    return im


def saveBitFieldImg(filename, func, invert=False, left=0, bottom=0, width=None, height=None, flipx=False, flipy=False, fg='white', bg='black', **kwargs):
    """
    Saves an image of the bit field produced by func.

    :param filename: The filename of the image. Can be either png, jpg, gif, or bmp.
    :param func: A function that accepts integer x and y coordinates, and returns True if this bit in the field should be visible and False if not.
    :param invert: Whether to toggle the return Boolean of func. Defaults to False.
    :param left: The x coordinate of the left edge of the bit field region. Defaults to 0.
    :param bottom: The y coordinate of the bottom edge of the bit field region. Defaults to 0.
    :param width: The desired width. If this is None, the returned width is set to the terminal's width in text cells.
    :param height: The desired height. If this is None, the returned height is set to twice the terminal's height in
    text cells because text cells are twice as tall as they are wide.
    :param flipx: If True, inverts the x coordinates to flip the bit field horizontally. Defaults to False.
    :param flipy: If True, inverts the y coordinates to flip the bit field vertically. Defaults to False.
    :param fg: The Pillow color string for foreground pixels where func returns a nonzero value. Can be a word like 'red' or RGB value like '#ff0000'. Defaults to 'white'.
    :param bg: The Pillow color string for background pixels where func returns a zero value. Can be a word like 'red' or RGB value like '#ff0000'. Defaults to 'black'.
    """
    getBitFieldImg(func, invert=invert, left=left, bottom=bottom, width=width, height=height, flipx=flipx, flipy=flipy, fg=fg, bg=bg, **kwargs).save(filename)


def showBitFieldImg(func, invert=False, left=0, bottom=0, width=None, height=None, flipx=False, flipy=False, fg='white', bg='black', **kwargs):
    """
    Saves an image of the bit field produced by func.

    :param filename: The filename of the image. Can be either png, jpg, gif, or bmp.
    :param func: A function that accepts integer x and y coordinates, and returns True if this bit in the field should be visible and False if not.
    :param invert: Whether to toggle the return Boolean of func. Defaults to False.
    :param left: The x coordinate of the left edge of the bit field region. Defaults to 0.
    :param bottom: The y coordinate of the bottom edge of the bit field region. Defaults to 0.
    :param width: The desired width. If this is None, the returned width is set to the terminal's width in text cells.
    :param height: The desired height. If this is None, the returned height is set to twice the terminal's height in
    text cells because text cells are twice as tall as they are wide.
    :param flipx: If True, inverts the x coordinates to flip the bit field horizontally. Defaults to False.
    :param flipy: If True, inverts the y coordinates to flip the bit field vertically. Defaults to False.
    :param fg: The Pillow color string for foreground pixels where func returns a nonzero value. Can be a word like 'red' or RGB value like '#ff0000'. Defaults to 'white'.
    :param bg: The Pillow color string for background pixels where func returns a zero value. Can be a word like 'red' or RGB value like '#ff0000'. Defaults to 'black'.
    """
    getBitFieldImg(func, invert=invert, left=left, bottom=bottom, width=width, height=height, flipx=flipx, flipy=flipy, fg=fg, bg=bg, **kwargs).show()


def getBitFieldStr(func, invert=False, left=0, bottom=0, width=None, height=None, flipx=False, flipy=False, **kwargs):
    """
    Returns a string describing the set bits of the bit field produced by func.

    :param func: A function that accepts integer x and y coordinates, and returns True if this bit in the field should be visible and False if not.
    :param invert: Whether to toggle the return Boolean of func. Defaults to False.
    :param left: The x coordinate of the left edge of the bit field region. Defaults to 0.
    :param bottom: The y coordinate of the bottom edge of the bit field region. Defaults to 0.
    :param width: The desired width. If this is None, the returned width is set to the terminal's width in text cells.
    :param height: The desired height. If this is None, the returned height is set to twice the terminal's height in
    text cells because text cells are twice as tall as they are wide.
    :param flipx: If True, inverts the x coordinates to flip the bit field horizontally. Defaults to False.
    :param flipy: If True, inverts the y coordinates to flip the bit field vertically. Defaults to False.
    """
    func, left, bottom, width, height = _adjustParams(func, left, bottom, width, height, **kwargs)

    # TODO - I could probably collapse these into one function, but for now the complexity makes my head spin so I'm keeping it as four separate functions.
    if height % 2 == 0 and not flipy:
        return _getBitFieldStr_evenHeight_noflipy(func, invert, left, bottom, width, height, flipx, flipy, **kwargs)
    elif height % 2 == 1 and not flipy:
        return _getBitFieldStr_oddHeight_noflipy(func, invert, left, bottom, width, height, flipx, flipy, **kwargs)
    elif height % 2 == 0 and flipy:
        return _getBitFieldStr_evenHeight_flipy(func, invert, left, bottom, width, height, flipx, flipy, **kwargs)
    elif height % 2 == 1 and  flipy:
        return _getBitFieldStr_oddHeight_flipy(func, invert, left, bottom, width, height, flipx, flipy, **kwargs)

def _getBitFieldStr_evenHeight_noflipy(func, invert=False, left=0, bottom=0, width=None, height=None, flipx=False, flipy=False, **kwargs):
    rows = []
    for y in range(bottom + height - 1, bottom - 1, -2):
        row = []
        for x in range(left, left + width):
            if not flipx:
                # Image is not flipped horizontally.
                try:
                    topBit = func(x, y)  # top-half of text cell
                except:
                    topBit = False

                try:
                    bottomBit = func(x, y - 1)  # bottom-half of text cell
                except:
                    bottomBit = False
            else:
                # Image is flipped horizontally.
                try:
                    topBit = func(width - 1 - x + left, y)  # top-half of text cell
                except:
                    topBit = False

                try:
                    bottomBit = func(width - 1 - x + left, y - 1)  # bottom-half of text cell
                except:
                    bottomBit = False

            row.append(_getBlockChar(topBit, bottomBit, invert))
        rows.append(''.join(row))
    return '\n'.join(rows)


def _getBitFieldStr_oddHeight_noflipy(func, invert=False, left=0, bottom=0, width=None, height=None, flipx=False, flipy=False, **kwargs):
    rows = []
    for y in range(bottom + height - 1, bottom - 1, -2):
        row = []
        for x in range(left, left + width):
            if y == bottom + height - 1:
                # If this is the top row, make it blank since the height is odd.
                topBit = False
            else:
                if not flipx:
                    # Image is not flipped horizontally.
                    try:
                        topBit = func(x, y + 1)  # top-half of text cell
                    except:
                        topBit = False
                else:
                    # Image is flipped horizontally.
                    try:
                        topBit = func(width - 1 - x + left, y + 1)  # top-half of text cell
                    except:
                        topBit = False

            if not flipx:
                # Image is not flipped horizontally.
                try:
                    bottomBit = func(x, y)  # bottom-half of text cell
                except:
                    bottomBit = False
            else:
                # Image is flipped horizontally.
                try:
                    bottomBit = func(width - 1 - x + left, y)  # bottom-half of text cell
                except:
                    bottomBit = False

            row.append(_getBlockChar(topBit, bottomBit, invert))
        rows.append(''.join(row))
    return '\n'.join(rows)


def _getBitFieldStr_evenHeight_flipy(func, invert=False, left=0, bottom=0, width=None, height=None, flipx=False, flipy=False, **kwargs):
    rows = []
    for y in range(bottom, bottom + height, 2):
        row = []
        for x in range(left, left + width):
            if not flipx:
                # Image is not flipped horizontally.
                try:
                    topBit = func(x, y)  # top-half of text cell
                except:
                    topBit = False

                try:
                    bottomBit = func(x, y + 1)  # bottom-half of text cell
                except:
                    bottomBit = False
            else:
                # Image is flipped horizontally.
                try:
                    topBit = func(width - 1 - x + left, y)  # top-half of text cell
                except:
                    topBit = False

                try:
                    bottomBit = func(width - 1 - x + left, y + 1)  # bottom-half of text cell
                except:
                    bottomBit = False

            row.append(_getBlockChar(topBit, bottomBit, invert))
        rows.append(''.join(row))
    return '\n'.join(rows)


def _getBitFieldStr_oddHeight_flipy(func, invert=False, left=0, bottom=0, width=None, height=None, flipx=False, flipy=False, **kwargs):
    rows = []
    for y in range(bottom, bottom + height, 2):
        row = []
        for x in range(left, left + width):
            if y == bottom + height - 1:
                # If this is the top row, make it blank since the height is odd.
                bottomBit = False
            else:
                if not flipx:
                    # Image is not flipped horizontally.
                    try:
                        bottomBit = func(x, y + 1)  # top-half of text cell
                    except:
                        bottomBit = False
                else:
                    # Image is flipped horizontally.
                    try:
                        bottomBit = func(width - 1 - x + left, y + 1)  # top-half of text cell
                    except:
                        bottomBit = False


            if not flipx:
                # Image is not flipped horizontally.
                try:
                    topBit = func(x, y)  # top-half of text cell
                except:
                    topBit = False
            else:
                # Image is flipped horizontally.
                try:
                    topBit = func(width - 1 - x + left, y)  # top-half of text cell
                except:
                    topBit = False

            row.append(_getBlockChar(topBit, bottomBit, invert))
        rows.append(''.join(row))
    return '\n'.join(rows)


def _getBlockChar(topBit, bottomBit, invert):
    if invert:
        if topBit and bottomBit:
            return EMPTY
        elif topBit and not bottomBit:
            return BOTTOM_BLOCK
        elif not topBit and bottomBit:
            return TOP_BLOCK
        else:
            return FULL_BLOCK
    else:
        if topBit and bottomBit:
            return FULL_BLOCK
        elif topBit and not bottomBit:
            return TOP_BLOCK
        elif not topBit and bottomBit:
            return BOTTOM_BLOCK
        else:
            return EMPTY


def printBitFieldStr(func, invert=False, left=0, bottom=0, width=None, height=None, flipx=False, flipy=False, **kwargs):
    """
    Display the bit field produced by func on the screen.

    :param func: A function that accepts integer x and y coordinates, and returns True if this bit in the field should be visible and False if not.
    :param invert: Whether to toggle the return Boolean of func. Defaults to False.
    :param left: The x coordinate of the left edge of the bit field region. Defaults to 0.
    :param bottom: The y coordinate of the bottom edge of the bit field region. Defaults to 0.
    :param width: The desired width. If this is None, the returned width is set to the terminal's width in text cells.
    :param height: The desired height. If this is None, the returned height is set to twice the terminal's height in
    text cells because text cells are twice as tall as they are wide.
    :param flipx: If True, inverts the x coordinates to flip the bit field horizontally. Defaults to False.
    :param flipy: If True, inverts the y coordinates to flip the bit field vertically. Defaults to False.
    """
    print(getBitFieldStr(func, invert=invert, left=left, bottom=bottom, width=width, height=height, flipx=flipx, flipy=flipy, **kwargs))


def saveBitFieldStr(filename, func, invert=False, left=0, bottom=0, width=None, height=None, flipx=False, flipy=False, **kwargs):
    """
    Save the text characters of the bit field produced by func to a file.

    :param filename: The filename to save the text to.
    :param func: A function that accepts integer x and y coordinates, and returns True if this bit in the field should be visible and False if not.
    :param invert: Whether to toggle the return Boolean of func. Defaults to False.
    :param left: The x coordinate of the left edge of the bit field region. Defaults to 0.
    :param bottom: The y coordinate of the bottom edge of the bit field region. Defaults to 0.
    :param width: The desired width. If this is None, the returned width is set to the terminal's width in text cells.
    :param height: The desired height. If this is None, the returned height is set to twice the terminal's height in
    text cells because text cells are twice as tall as they are wide.
    :param flipx: If True, inverts the x coordinates to flip the bit field horizontally. Defaults to False.
    :param flipy: If True, inverts the y coordinates to flip the bit field vertically. Defaults to False.
    """

    bitFieldStr = getBitFieldStr(func, invert=invert, left=left, bottom=bottom, width=width, height=height, flipx=flipx, flipy=flipy, **kwargs)

    bitFieldFileObj = open(filename, 'w', encoding='utf-8')
    bitFieldFileObj.write(bitFieldStr)
    bitFieldFileObj.close()


def save(filename, func, invert=False, left=0, bottom=0, width=None, height=None, flipx=False, flipy=False, fg='white', bg='black', **kwargs):
    """
    Saves an image or text string (based on the file extension of the filename argument) of the bit field produced by func.

    :param filename: The filename of the image. Can be either .txt, png, jpg, gif, or bmp.
    :param func: A function that accepts integer x and y coordinates, and returns True if this bit in the field should be visible and False if not.
    :param invert: Whether to toggle the return Boolean of func. Defaults to False.
    :param left: The x coordinate of the left edge of the bit field region. Defaults to 0.
    :param bottom: The y coordinate of the bottom edge of the bit field region. Defaults to 0.
    :param width: The desired width. If this is None, the returned width is set to the terminal's width in text cells.
    :param height: The desired height. If this is None, the returned height is set to twice the terminal's height in
    text cells because text cells are twice as tall as they are wide.
    :param flipx: If True, inverts the x coordinates to flip the bit field horizontally. Defaults to False.
    :param flipy: If True, inverts the y coordinates to flip the bit field vertically. Defaults to False.
    :param fg: The Pillow color string for foreground pixels where func returns a nonzero value. Can be a word like 'red' or RGB value like '#ff0000'. Defaults to 'white'.
    :param bg: The Pillow color string for background pixels where func returns a zero value. Can be a word like 'red' or RGB value like '#ff0000'. Defaults to 'black'.
    """
    if filename.lower().endswith('.txt'):
        return saveBitFieldStr(filename, func, invert=invert, left=left, bottom=bottom, width=width, height=height, flipx=flipx, flipy=flipy, **kwargs)
    else:
        return saveBitFieldImg(filename, func, invert=invert, left=left, bottom=bottom, width=width, height=height, flipx=flipx, flipy=flipy, fg='white', bg='black', **kwargs)



# Function shortcut names:
p = printBitFieldStr
s = showBitFieldImg



# TODO - add a feature so that w and h can be used instead of width and height, or o for the origin instead of left and bottom

if __name__ == '__main__':
    main()
