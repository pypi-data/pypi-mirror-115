Metadata-Version: 2.1
Name: GeneticCVSearch
Version: 1.0.2
Summary: GeneticCVSearch
Home-page: https://github.com/HindyDS/GeneticCVSearch
Author: Hindy Yuen
Author-email: hindy888@hotmail.com
License: MIT
Keywords: Genetic CV Hypeparameters Search
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Build Tools
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Requires-Python: >=3.6
Description-Content-Type: text/markdown

# GeneticCVSearch

GeneticCVSearch aims to provide a simple implementation for the users to perform sequential hyperparameters search with genetic algorithm.

## 1) Initial Population 
   a) Heuristic 

   b) Randomized ?

## 2) Selection
   a) Roulette Wheel Selection ?

   b) Rank Selection ?

   c) Steady State Selection ?

   d) Tournament Selection ?

   e) Elitism Selection ?

   f) Boltzmann Selection 


## 3) Reproduction
   a) One-point crossover ?

   b) k-point crossover ?

   c) Uniform crossover ?


## 4) Mutation
   a) Bit string mutation

   b) Flip Bit

   c) Boundary ?

   d) Non-Uniform ?

   e) Uniform ?

   f) Gaussian ?

   g) Shrink ?



Quick Start:

	!pip install GeneticCVSearch

	from GeneticCVSearch import GeneticCVSearch

	gcvs = GeneticCVSearch()

	gcvs.seq_evo(
             search_space=search_space,
             pop_size=<pos int>, 
             estimator=<ML model>, 
             cv=<pos inti>, 
             scoring=<scoring metrics from sklearn>, 
             select_fn=<selection function (RW, SS, T, SUS or R)>, 
             Tournament_size=<pos int (only if select_fn='T')>,
             offspring_size=<pos int>, 
             c_pt=<pos int>,
             dominance=<boolean>, 
             weighted=<boolean>,
             n_elite=<frac between 0 to 1>,
             mu_method=<mutation function (Boundary, Non-Uniform, Uniform, Shrink or Gaussian)>, 
             epsilon=<frac between 0 to 1>, 
             momentum=<frac between 0 to 1>, 
             verbose=1)

It requires at least six arguments to run:

- estimators: machine learning model
- X (array): features space
- y (array): target
- cv (int): number of folds in a (Stratified)KFold
- scoring (str): see https://scikit-learn.org/stable/modules/model_evaluation.html
- estimator: machine learning models
- pop_size (int): population size
- select_method (str): 'RW' (Roulette Wheel)
		        'SS' (Steady State/Stratify)
		        'T' (Tournament)
		        'SUS' (Stochastic Universal Sampling)
		        'R' (Rank)
- offspring_size (int): offspring size
- c_pt (int): 'crossover point'
- epsilon (float): mutation rate
- tolerance (int): number of fails that GFS can tolerate
- verbose (int): level of verbosity


