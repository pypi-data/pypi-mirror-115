Rt = [[0, 1, 62, 28, 27], [36, 44, 6, 55, 20], [3, 10, 43, 25, 39], [41, 45, 15, 21, 8], [18, 2, 61, 56, 14]]
Rc = [1, 32898, 9223372036854808714, 9223372039002292224, 32907, 2147483649, 9223372039002292353, 9223372036854808585, 138, 136, 2147516425, 2147483658, 2147516555, 9223372036854775947, 9223372036854808713, 9223372036854808579, 9223372036854808578, 9223372036854775936, 32778, 9223372039002259466, 9223372039002292353, 9223372036854808704, 2147483649, 9223372039002292232]
Ms = [0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215, 33554431, 67108863, 134217727, 268435455, 536870911, 1073741823, 2147483647, 4294967295, 8589934591, 17179869183, 34359738367, 68719476735, 137438953471, 274877906943, 549755813887, 1099511627775, 2199023255551, 4398046511103, 8796093022207, 17592186044415, 35184372088831, 70368744177663, 140737488355327, 281474976710655, 562949953421311, 1125899906842623, 2251799813685247, 4503599627370495, 9007199254740991, 18014398509481983, 36028797018963967, 72057594037927935, 144115188075855871, 288230376151711743, 576460752303423487, 1152921504606846975, 2305843009213693951, 4611686018427387903, 9223372036854775807, 18446744073709551615]
def K(s, le=64):
    r24 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
    r32 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
    X = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
    m = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
    o = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    e = [0, 8, 16, 24, 32, 40, 48, 56]
    j = [0, 1, 2, 3, 4]
    b = C = []
    b += s
    bb = b + [1] + [0] * (134 - le) + [128] + [0] * 64
    i = 0
    for y in j:
        for x in j:
            r = 0
            for b in reversed(bb[i:i + 8]):
                r = r << 8 | b
            m[x][y] ^= r
            i += 8
    for ir in r24:
        B = X
        for x in j:
            C[x] = m[x][0] ^ m[x][1] ^ m[x][2] ^ m[x][3] ^ m[x][4]
        for x in j:
            U = C[(x - 1) % 5] ^ ((C[(x + 1) % 5] & Ms[63]) << 1 | C[(x + 1) % 5] >> 63)
            for y in j:
                m[x][y] ^= U
        for x in j:
            for y in j:
                B[y % 5][(2 * x + 3 * y) % 5] = (m[x][y] & Ms[64 - Rt[y][x]]) << Rt[y][x] | m[x][y] >> (64 - Rt[y][x])
        for x in j:
            for y in j:
                m[x][y] = B[x][y] ^ ((~ B[(x + 1) % 5][y]) & B[(x + 2) % 5][y])
        m[0][0] ^= Rc[ir]
    for h in r32:
        o[h] = (m[h//8][0] >> e[h % 8]) & 0xff
    return ''.join(format(x, '02x') for x in o)
def G(s):
    z = str(bin(s))[2:]
    l = len(z)
    p = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F
    x = Gx = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798
    y = Gy = 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8
    for i in range(1, l):
        lm, hm = 1, 0
        lw, hg = 2*y % p, p
        while lw > 1:
            ro = hg//lw
            nm, nw = hm-lm*ro, hg-lw*ro
            lm, lw, hm, hg = nm, nw, lm, lw
        R = lm % p
        o = 3*x*x*R % p
        u = o*o-2*x
        y = (o*(x-u % p)-y) % p
        x = u % p
        if z[i] == '1':
            lm, hm = 1, 0
            lw, hg = (Gx - x) % p, p
            while lw > 1:
                ro = hg//lw
                nm, nw = hm-lm*ro, hg-lw*ro
                lm, lw, hm, hg = nm, nw, lm, lw
            R = lm % p
            o = (Gy-y)*R % p
            u = o*o-x-Gx
            y = (o*(x-u % p)-y) % p
            x = u % p
        Px = hex(x)[2:]
        Py = hex(y)[2:]
        Px = '0' * (64-len(Px)) + Px
        Py = '0' * (64-len(Py)) + Py
    se = bytes.fromhex(Px + Py)
    b = K(se, 64)[24:]
    k = K(b.encode('utf-8'), 40)
    a = '0x'
    for i in range(40):
        ac = b[i]
        kc = k[i]
        if int(kc, 16) >= 8:
            ac = ac.upper()
        a += str(ac)
    k = hex(s)[2:]
    k = '0'*(64-len(k)) + k
    return (a, k)