# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ExternalFunctionArg',
    'ExternalFunctionHeader',
    'ExternalTableColumn',
    'FunctionGrantArgument',
    'ProcedureGrantArgument',
    'TableColumn',
    'TablePrimaryKey',
    'GetMaterializedViewsMaterializedViewResult',
    'GetSchemasSchemaResult',
    'GetTablesTableResult',
    'GetViewsViewResult',
]

@pulumi.output_type
class ExternalFunctionArg(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str):
        """
        :param str name: Argument name
        :param str type: Argument type, e.g. VARCHAR
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Argument name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Argument type, e.g. VARCHAR
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ExternalFunctionHeader(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: Header name
        :param str value: Header value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Header name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Header value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ExternalTableColumn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "as":
            suggest = "as_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalTableColumn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalTableColumn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalTableColumn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 as_: str,
                 name: str,
                 type: str):
        """
        :param str as_: String that specifies the expression for the column. When queried, the column returns results derived from this expression.
        :param str name: Column name
        :param str type: Column type, e.g. VARIANT
        """
        pulumi.set(__self__, "as_", as_)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="as")
    def as_(self) -> str:
        """
        String that specifies the expression for the column. When queried, the column returns results derived from this expression.
        """
        return pulumi.get(self, "as_")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Column name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Column type, e.g. VARIANT
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class FunctionGrantArgument(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str):
        """
        :param str name: The argument name
        :param str type: The argument type
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The argument name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The argument type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ProcedureGrantArgument(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str):
        """
        :param str name: The argument name
        :param str type: The argument type
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The argument name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The argument type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class TableColumn(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str,
                 nullable: Optional[bool] = None):
        """
        :param str name: Column name
        :param str type: Column type, e.g. VARIANT
        :param bool nullable: Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if nullable is not None:
            pulumi.set(__self__, "nullable", nullable)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Column name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Column type, e.g. VARIANT
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def nullable(self) -> Optional[bool]:
        """
        Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.
        """
        return pulumi.get(self, "nullable")


@pulumi.output_type
class TablePrimaryKey(dict):
    def __init__(__self__, *,
                 keys: Sequence[str],
                 name: Optional[str] = None):
        """
        :param Sequence[str] keys: Columns to use in primary key
        :param str name: Name of constraint
        """
        pulumi.set(__self__, "keys", keys)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def keys(self) -> Sequence[str]:
        """
        Columns to use in primary key
        """
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of constraint
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetMaterializedViewsMaterializedViewResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 database: str,
                 name: str,
                 schema: str):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")


@pulumi.output_type
class GetSchemasSchemaResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 database: str,
                 name: str):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTablesTableResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 database: str,
                 name: str,
                 schema: str):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")


@pulumi.output_type
class GetViewsViewResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 database: str,
                 name: str,
                 schema: str):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")


