# coding: utf-8

"""
    Onepanel

    Onepanel API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from onepanel.core.api.configuration import Configuration


class Predictor(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'runtime_version': 'str',
        'storage_uri': 'str',
        'node_selector': 'str',
        'cpu': 'str',
        'memory': 'str'
    }

    attribute_map = {
        'name': 'name',
        'runtime_version': 'runtimeVersion',
        'storage_uri': 'storageUri',
        'node_selector': 'nodeSelector',
        'cpu': 'cpu',
        'memory': 'memory'
    }

    def __init__(self, name=None, runtime_version=None, storage_uri=None, node_selector=None, cpu=None, memory=None, local_vars_configuration=None):  # noqa: E501
        """Predictor - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._runtime_version = None
        self._storage_uri = None
        self._node_selector = None
        self._cpu = None
        self._memory = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if runtime_version is not None:
            self.runtime_version = runtime_version
        if storage_uri is not None:
            self.storage_uri = storage_uri
        if node_selector is not None:
            self.node_selector = node_selector
        if cpu is not None:
            self.cpu = cpu
        if memory is not None:
            self.memory = memory

    @property
    def name(self):
        """Gets the name of this Predictor.  # noqa: E501


        :return: The name of this Predictor.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Predictor.


        :param name: The name of this Predictor.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def runtime_version(self):
        """Gets the runtime_version of this Predictor.  # noqa: E501


        :return: The runtime_version of this Predictor.  # noqa: E501
        :rtype: str
        """
        return self._runtime_version

    @runtime_version.setter
    def runtime_version(self, runtime_version):
        """Sets the runtime_version of this Predictor.


        :param runtime_version: The runtime_version of this Predictor.  # noqa: E501
        :type: str
        """

        self._runtime_version = runtime_version

    @property
    def storage_uri(self):
        """Gets the storage_uri of this Predictor.  # noqa: E501


        :return: The storage_uri of this Predictor.  # noqa: E501
        :rtype: str
        """
        return self._storage_uri

    @storage_uri.setter
    def storage_uri(self, storage_uri):
        """Sets the storage_uri of this Predictor.


        :param storage_uri: The storage_uri of this Predictor.  # noqa: E501
        :type: str
        """

        self._storage_uri = storage_uri

    @property
    def node_selector(self):
        """Gets the node_selector of this Predictor.  # noqa: E501


        :return: The node_selector of this Predictor.  # noqa: E501
        :rtype: str
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """Sets the node_selector of this Predictor.


        :param node_selector: The node_selector of this Predictor.  # noqa: E501
        :type: str
        """

        self._node_selector = node_selector

    @property
    def cpu(self):
        """Gets the cpu of this Predictor.  # noqa: E501


        :return: The cpu of this Predictor.  # noqa: E501
        :rtype: str
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this Predictor.


        :param cpu: The cpu of this Predictor.  # noqa: E501
        :type: str
        """

        self._cpu = cpu

    @property
    def memory(self):
        """Gets the memory of this Predictor.  # noqa: E501


        :return: The memory of this Predictor.  # noqa: E501
        :rtype: str
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this Predictor.


        :param memory: The memory of this Predictor.  # noqa: E501
        :type: str
        """

        self._memory = memory

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Predictor):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Predictor):
            return True

        return self.to_dict() != other.to_dict()
