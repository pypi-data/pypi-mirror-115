# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetNoteResult',
    'AwaitableGetNoteResult',
    'get_note',
]

@pulumi.output_type
class GetNoteResult:
    def __init__(__self__, attestation_authority=None, base_image=None, build_type=None, compliance=None, create_time=None, deployable=None, discovery=None, expiration_time=None, kind=None, long_description=None, name=None, package=None, related_url=None, short_description=None, update_time=None, upgrade=None, vulnerability_type=None):
        if attestation_authority and not isinstance(attestation_authority, dict):
            raise TypeError("Expected argument 'attestation_authority' to be a dict")
        pulumi.set(__self__, "attestation_authority", attestation_authority)
        if base_image and not isinstance(base_image, dict):
            raise TypeError("Expected argument 'base_image' to be a dict")
        pulumi.set(__self__, "base_image", base_image)
        if build_type and not isinstance(build_type, dict):
            raise TypeError("Expected argument 'build_type' to be a dict")
        pulumi.set(__self__, "build_type", build_type)
        if compliance and not isinstance(compliance, dict):
            raise TypeError("Expected argument 'compliance' to be a dict")
        pulumi.set(__self__, "compliance", compliance)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if deployable and not isinstance(deployable, dict):
            raise TypeError("Expected argument 'deployable' to be a dict")
        pulumi.set(__self__, "deployable", deployable)
        if discovery and not isinstance(discovery, dict):
            raise TypeError("Expected argument 'discovery' to be a dict")
        pulumi.set(__self__, "discovery", discovery)
        if expiration_time and not isinstance(expiration_time, str):
            raise TypeError("Expected argument 'expiration_time' to be a str")
        pulumi.set(__self__, "expiration_time", expiration_time)
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        pulumi.set(__self__, "kind", kind)
        if long_description and not isinstance(long_description, str):
            raise TypeError("Expected argument 'long_description' to be a str")
        pulumi.set(__self__, "long_description", long_description)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if package and not isinstance(package, dict):
            raise TypeError("Expected argument 'package' to be a dict")
        pulumi.set(__self__, "package", package)
        if related_url and not isinstance(related_url, list):
            raise TypeError("Expected argument 'related_url' to be a list")
        pulumi.set(__self__, "related_url", related_url)
        if short_description and not isinstance(short_description, str):
            raise TypeError("Expected argument 'short_description' to be a str")
        pulumi.set(__self__, "short_description", short_description)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if upgrade and not isinstance(upgrade, dict):
            raise TypeError("Expected argument 'upgrade' to be a dict")
        pulumi.set(__self__, "upgrade", upgrade)
        if vulnerability_type and not isinstance(vulnerability_type, dict):
            raise TypeError("Expected argument 'vulnerability_type' to be a dict")
        pulumi.set(__self__, "vulnerability_type", vulnerability_type)

    @property
    @pulumi.getter(name="attestationAuthority")
    def attestation_authority(self) -> 'outputs.AttestationAuthorityResponse':
        """
        A note describing an attestation role.
        """
        return pulumi.get(self, "attestation_authority")

    @property
    @pulumi.getter(name="baseImage")
    def base_image(self) -> 'outputs.BasisResponse':
        """
        A note describing a base image.
        """
        return pulumi.get(self, "base_image")

    @property
    @pulumi.getter(name="buildType")
    def build_type(self) -> 'outputs.BuildTypeResponse':
        """
        Build provenance type for a verifiable build.
        """
        return pulumi.get(self, "build_type")

    @property
    @pulumi.getter
    def compliance(self) -> 'outputs.ComplianceNoteResponse':
        """
        A note describing a compliance check.
        """
        return pulumi.get(self, "compliance")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time this note was created. This field can be used as a filter in list requests.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def deployable(self) -> 'outputs.DeployableResponse':
        """
        A note describing something that can be deployed.
        """
        return pulumi.get(self, "deployable")

    @property
    @pulumi.getter
    def discovery(self) -> 'outputs.DiscoveryResponse':
        """
        A note describing a provider/analysis type.
        """
        return pulumi.get(self, "discovery")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> str:
        """
        Time of expiration for this note, null if note does not expire.
        """
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        This explicitly denotes which kind of note is specified. This field can be used as a filter in list requests.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="longDescription")
    def long_description(self) -> str:
        """
        A detailed description of this `Note`.
        """
        return pulumi.get(self, "long_description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the note in the form "projects/{provider_project_id}/notes/{NOTE_ID}"
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def package(self) -> 'outputs.PackageResponse':
        """
        A note describing a package hosted by various package managers.
        """
        return pulumi.get(self, "package")

    @property
    @pulumi.getter(name="relatedUrl")
    def related_url(self) -> Sequence['outputs.RelatedUrlResponse']:
        """
        URLs associated with this note
        """
        return pulumi.get(self, "related_url")

    @property
    @pulumi.getter(name="shortDescription")
    def short_description(self) -> str:
        """
        A one sentence description of this `Note`.
        """
        return pulumi.get(self, "short_description")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The time this note was last updated. This field can be used as a filter in list requests.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def upgrade(self) -> 'outputs.UpgradeNoteResponse':
        """
        A note describing an upgrade.
        """
        return pulumi.get(self, "upgrade")

    @property
    @pulumi.getter(name="vulnerabilityType")
    def vulnerability_type(self) -> 'outputs.VulnerabilityTypeResponse':
        """
        A package vulnerability type of note.
        """
        return pulumi.get(self, "vulnerability_type")


class AwaitableGetNoteResult(GetNoteResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNoteResult(
            attestation_authority=self.attestation_authority,
            base_image=self.base_image,
            build_type=self.build_type,
            compliance=self.compliance,
            create_time=self.create_time,
            deployable=self.deployable,
            discovery=self.discovery,
            expiration_time=self.expiration_time,
            kind=self.kind,
            long_description=self.long_description,
            name=self.name,
            package=self.package,
            related_url=self.related_url,
            short_description=self.short_description,
            update_time=self.update_time,
            upgrade=self.upgrade,
            vulnerability_type=self.vulnerability_type)


def get_note(note_id: Optional[str] = None,
             project: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNoteResult:
    """
    Returns the requested `Note`.
    """
    __args__ = dict()
    __args__['noteId'] = note_id
    __args__['project'] = project
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('google-native:containeranalysis/v1alpha1:getNote', __args__, opts=opts, typ=GetNoteResult).value

    return AwaitableGetNoteResult(
        attestation_authority=__ret__.attestation_authority,
        base_image=__ret__.base_image,
        build_type=__ret__.build_type,
        compliance=__ret__.compliance,
        create_time=__ret__.create_time,
        deployable=__ret__.deployable,
        discovery=__ret__.discovery,
        expiration_time=__ret__.expiration_time,
        kind=__ret__.kind,
        long_description=__ret__.long_description,
        name=__ret__.name,
        package=__ret__.package,
        related_url=__ret__.related_url,
        short_description=__ret__.short_description,
        update_time=__ret__.update_time,
        upgrade=__ret__.upgrade,
        vulnerability_type=__ret__.vulnerability_type)
