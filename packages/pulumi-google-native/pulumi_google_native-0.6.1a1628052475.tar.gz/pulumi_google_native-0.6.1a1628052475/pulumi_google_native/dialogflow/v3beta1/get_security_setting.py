# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'GetSecuritySettingResult',
    'AwaitableGetSecuritySettingResult',
    'get_security_setting',
]

@pulumi.output_type
class GetSecuritySettingResult:
    def __init__(__self__, display_name=None, inspect_template=None, name=None, purge_data_types=None, redaction_scope=None, redaction_strategy=None, retention_window_days=None):
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if inspect_template and not isinstance(inspect_template, str):
            raise TypeError("Expected argument 'inspect_template' to be a str")
        pulumi.set(__self__, "inspect_template", inspect_template)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if purge_data_types and not isinstance(purge_data_types, list):
            raise TypeError("Expected argument 'purge_data_types' to be a list")
        pulumi.set(__self__, "purge_data_types", purge_data_types)
        if redaction_scope and not isinstance(redaction_scope, str):
            raise TypeError("Expected argument 'redaction_scope' to be a str")
        pulumi.set(__self__, "redaction_scope", redaction_scope)
        if redaction_strategy and not isinstance(redaction_strategy, str):
            raise TypeError("Expected argument 'redaction_strategy' to be a str")
        pulumi.set(__self__, "redaction_strategy", redaction_strategy)
        if retention_window_days and not isinstance(retention_window_days, int):
            raise TypeError("Expected argument 'retention_window_days' to be a int")
        pulumi.set(__self__, "retention_window_days", retention_window_days)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The human-readable name of the security settings, unique within the location.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="inspectTemplate")
    def inspect_template(self) -> str:
        """
        [DLP](https://cloud.google.com/dlp/docs) inspect template name. Use this template to define inspect base settings. If empty, we use the default DLP inspect config. The template name will have one of the following formats: `projects//inspectTemplates/` OR `projects//locations//inspectTemplates/` OR `organizations//inspectTemplates/`
        """
        return pulumi.get(self, "inspect_template")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource name of the settings. Format: `projects//locations//securitySettings/`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="purgeDataTypes")
    def purge_data_types(self) -> Sequence[str]:
        """
        List of types of data to remove when retention settings triggers purge.
        """
        return pulumi.get(self, "purge_data_types")

    @property
    @pulumi.getter(name="redactionScope")
    def redaction_scope(self) -> str:
        """
        Defines the data for which Dialogflow applies redaction. Dialogflow does not redact data that it does not have access to â€“ for example, Cloud logging.
        """
        return pulumi.get(self, "redaction_scope")

    @property
    @pulumi.getter(name="redactionStrategy")
    def redaction_strategy(self) -> str:
        """
        Strategy that defines how we do redaction.
        """
        return pulumi.get(self, "redaction_strategy")

    @property
    @pulumi.getter(name="retentionWindowDays")
    def retention_window_days(self) -> int:
        """
        Retains data in interaction logging for the specified number of days. This does not apply to Cloud logging, which is owned by the user - not Dialogflow. User must Set a value lower than Dialogflow's default 30d TTL. Setting a value higher than that has no effect. A missing value or setting to 0 also means we use Dialogflow's default TTL. Note: Interaction logging is a limited access feature. Talk to your Google representative to check availability for you.
        """
        return pulumi.get(self, "retention_window_days")


class AwaitableGetSecuritySettingResult(GetSecuritySettingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSecuritySettingResult(
            display_name=self.display_name,
            inspect_template=self.inspect_template,
            name=self.name,
            purge_data_types=self.purge_data_types,
            redaction_scope=self.redaction_scope,
            redaction_strategy=self.redaction_strategy,
            retention_window_days=self.retention_window_days)


def get_security_setting(location: Optional[str] = None,
                         project: Optional[str] = None,
                         security_setting_id: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSecuritySettingResult:
    """
    Retrieves the specified SecuritySettings. The returned settings may be stale by up to 1 minute.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['project'] = project
    __args__['securitySettingId'] = security_setting_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('google-native:dialogflow/v3beta1:getSecuritySetting', __args__, opts=opts, typ=GetSecuritySettingResult).value

    return AwaitableGetSecuritySettingResult(
        display_name=__ret__.display_name,
        inspect_template=__ret__.inspect_template,
        name=__ret__.name,
        purge_data_types=__ret__.purge_data_types,
        redaction_scope=__ret__.redaction_scope,
        redaction_strategy=__ret__.redaction_strategy,
        retention_window_days=__ret__.retention_window_days)
