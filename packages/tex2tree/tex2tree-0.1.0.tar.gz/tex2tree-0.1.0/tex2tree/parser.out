Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> exp
Rule 2     frac -> FRAC char char
Rule 3     frac -> FRAC bound_exp char
Rule 4     frac -> FRAC char bound_exp
Rule 5     frac -> FRAC bound_exp bound_exp
Rule 6     sqrt -> SQRT char
Rule 7     sqrt -> SQRT bound_exp
Rule 8     sqrt -> SQRT mb_exp char
Rule 9     sqrt -> SQRT mb_exp bound_exp
Rule 10    mb_exp -> LMB chars RMB
Rule 11    chars -> char
Rule 12    chars -> char chars
Rule 13    bound_exp -> LB exp RB
Rule 14    pb_exp -> left_single_exp SUP single_exp
Rule 15    pb_exp -> left_single_exp SUB single_exp
Rule 16    pb_exp -> right_single_exp SUP single_exp
Rule 17    pb_exp -> right_single_exp SUB single_exp
Rule 18    pb_exp -> left_single_exp SUP single_exp SUB single_exp
Rule 19    pb_exp -> left_single_exp SUB single_exp SUP single_exp
Rule 20    pb_exp -> right_single_exp SUP single_exp SUB single_exp
Rule 21    pb_exp -> right_single_exp SUB single_exp SUP single_exp
Rule 22    exp -> group_exp exp
Rule 23    exp -> right_single_exp exp
Rule 24    exp -> group_exp
Rule 25    exp -> right_single_exp
Rule 26    group_exp -> left_single_exp
Rule 27    group_exp -> pb_exp
Rule 28    single_exp -> left_single_exp
Rule 29    single_exp -> right_single_exp
Rule 30    left_single_exp -> char
Rule 31    left_single_exp -> frac
Rule 32    left_single_exp -> sqrt
Rule 33    right_single_exp -> bound_exp
Rule 34    left_single_exp -> LMB
Rule 35    left_single_exp -> RMB
Rule 36    char -> CHAR

Terminals, with rules where they appear

CHAR                 : 36
FRAC                 : 2 3 4 5
LB                   : 13
LMB                  : 10 34
RB                   : 13
RMB                  : 10 35
SQRT                 : 6 7 8 9
SUB                  : 15 17 18 19 20 21
SUP                  : 14 16 18 19 20 21
error                : 

Nonterminals, with rules where they appear

bound_exp            : 3 4 5 5 7 9 33
char                 : 2 2 3 4 6 8 11 12 30
chars                : 10 12
exp                  : 1 13 22 23
expression           : 0
frac                 : 31
group_exp            : 22 24
left_single_exp      : 14 15 18 19 26 28
mb_exp               : 8 9
pb_exp               : 27
right_single_exp     : 16 17 20 21 23 25 29
single_exp           : 14 15 16 17 18 18 19 19 20 20 21 21
sqrt                 : 32

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . exp
    (22) exp -> . group_exp exp
    (23) exp -> . right_single_exp exp
    (24) exp -> . group_exp
    (25) exp -> . right_single_exp
    (26) group_exp -> . left_single_exp
    (27) group_exp -> . pb_exp
    (33) right_single_exp -> . bound_exp
    (30) left_single_exp -> . char
    (31) left_single_exp -> . frac
    (32) left_single_exp -> . sqrt
    (34) left_single_exp -> . LMB
    (35) left_single_exp -> . RMB
    (14) pb_exp -> . left_single_exp SUP single_exp
    (15) pb_exp -> . left_single_exp SUB single_exp
    (16) pb_exp -> . right_single_exp SUP single_exp
    (17) pb_exp -> . right_single_exp SUB single_exp
    (18) pb_exp -> . left_single_exp SUP single_exp SUB single_exp
    (19) pb_exp -> . left_single_exp SUB single_exp SUP single_exp
    (20) pb_exp -> . right_single_exp SUP single_exp SUB single_exp
    (21) pb_exp -> . right_single_exp SUB single_exp SUP single_exp
    (13) bound_exp -> . LB exp RB
    (36) char -> . CHAR
    (2) frac -> . FRAC char char
    (3) frac -> . FRAC bound_exp char
    (4) frac -> . FRAC char bound_exp
    (5) frac -> . FRAC bound_exp bound_exp
    (6) sqrt -> . SQRT char
    (7) sqrt -> . SQRT bound_exp
    (8) sqrt -> . SQRT mb_exp char
    (9) sqrt -> . SQRT mb_exp bound_exp

    LMB             shift and go to state 11
    RMB             shift and go to state 12
    LB              shift and go to state 13
    CHAR            shift and go to state 14
    FRAC            shift and go to state 15
    SQRT            shift and go to state 16

    expression                     shift and go to state 1
    exp                            shift and go to state 2
    group_exp                      shift and go to state 3
    right_single_exp               shift and go to state 4
    left_single_exp                shift and go to state 5
    pb_exp                         shift and go to state 6
    bound_exp                      shift and go to state 7
    char                           shift and go to state 8
    frac                           shift and go to state 9
    sqrt                           shift and go to state 10

state 1

    (0) S' -> expression .



state 2

    (1) expression -> exp .

    $end            reduce using rule 1 (expression -> exp .)


state 3

    (22) exp -> group_exp . exp
    (24) exp -> group_exp .
    (22) exp -> . group_exp exp
    (23) exp -> . right_single_exp exp
    (24) exp -> . group_exp
    (25) exp -> . right_single_exp
    (26) group_exp -> . left_single_exp
    (27) group_exp -> . pb_exp
    (33) right_single_exp -> . bound_exp
    (30) left_single_exp -> . char
    (31) left_single_exp -> . frac
    (32) left_single_exp -> . sqrt
    (34) left_single_exp -> . LMB
    (35) left_single_exp -> . RMB
    (14) pb_exp -> . left_single_exp SUP single_exp
    (15) pb_exp -> . left_single_exp SUB single_exp
    (16) pb_exp -> . right_single_exp SUP single_exp
    (17) pb_exp -> . right_single_exp SUB single_exp
    (18) pb_exp -> . left_single_exp SUP single_exp SUB single_exp
    (19) pb_exp -> . left_single_exp SUB single_exp SUP single_exp
    (20) pb_exp -> . right_single_exp SUP single_exp SUB single_exp
    (21) pb_exp -> . right_single_exp SUB single_exp SUP single_exp
    (13) bound_exp -> . LB exp RB
    (36) char -> . CHAR
    (2) frac -> . FRAC char char
    (3) frac -> . FRAC bound_exp char
    (4) frac -> . FRAC char bound_exp
    (5) frac -> . FRAC bound_exp bound_exp
    (6) sqrt -> . SQRT char
    (7) sqrt -> . SQRT bound_exp
    (8) sqrt -> . SQRT mb_exp char
    (9) sqrt -> . SQRT mb_exp bound_exp

    $end            reduce using rule 24 (exp -> group_exp .)
    RB              reduce using rule 24 (exp -> group_exp .)
    LMB             shift and go to state 11
    RMB             shift and go to state 12
    LB              shift and go to state 13
    CHAR            shift and go to state 14
    FRAC            shift and go to state 15
    SQRT            shift and go to state 16

    group_exp                      shift and go to state 3
    exp                            shift and go to state 17
    right_single_exp               shift and go to state 4
    left_single_exp                shift and go to state 5
    pb_exp                         shift and go to state 6
    bound_exp                      shift and go to state 7
    char                           shift and go to state 8
    frac                           shift and go to state 9
    sqrt                           shift and go to state 10

state 4

    (23) exp -> right_single_exp . exp
    (25) exp -> right_single_exp .
    (16) pb_exp -> right_single_exp . SUP single_exp
    (17) pb_exp -> right_single_exp . SUB single_exp
    (20) pb_exp -> right_single_exp . SUP single_exp SUB single_exp
    (21) pb_exp -> right_single_exp . SUB single_exp SUP single_exp
    (22) exp -> . group_exp exp
    (23) exp -> . right_single_exp exp
    (24) exp -> . group_exp
    (25) exp -> . right_single_exp
    (26) group_exp -> . left_single_exp
    (27) group_exp -> . pb_exp
    (33) right_single_exp -> . bound_exp
    (30) left_single_exp -> . char
    (31) left_single_exp -> . frac
    (32) left_single_exp -> . sqrt
    (34) left_single_exp -> . LMB
    (35) left_single_exp -> . RMB
    (14) pb_exp -> . left_single_exp SUP single_exp
    (15) pb_exp -> . left_single_exp SUB single_exp
    (16) pb_exp -> . right_single_exp SUP single_exp
    (17) pb_exp -> . right_single_exp SUB single_exp
    (18) pb_exp -> . left_single_exp SUP single_exp SUB single_exp
    (19) pb_exp -> . left_single_exp SUB single_exp SUP single_exp
    (20) pb_exp -> . right_single_exp SUP single_exp SUB single_exp
    (21) pb_exp -> . right_single_exp SUB single_exp SUP single_exp
    (13) bound_exp -> . LB exp RB
    (36) char -> . CHAR
    (2) frac -> . FRAC char char
    (3) frac -> . FRAC bound_exp char
    (4) frac -> . FRAC char bound_exp
    (5) frac -> . FRAC bound_exp bound_exp
    (6) sqrt -> . SQRT char
    (7) sqrt -> . SQRT bound_exp
    (8) sqrt -> . SQRT mb_exp char
    (9) sqrt -> . SQRT mb_exp bound_exp

    $end            reduce using rule 25 (exp -> right_single_exp .)
    RB              reduce using rule 25 (exp -> right_single_exp .)
    SUP             shift and go to state 19
    SUB             shift and go to state 20
    LMB             shift and go to state 11
    RMB             shift and go to state 12
    LB              shift and go to state 13
    CHAR            shift and go to state 14
    FRAC            shift and go to state 15
    SQRT            shift and go to state 16

    right_single_exp               shift and go to state 4
    exp                            shift and go to state 18
    group_exp                      shift and go to state 3
    left_single_exp                shift and go to state 5
    pb_exp                         shift and go to state 6
    bound_exp                      shift and go to state 7
    char                           shift and go to state 8
    frac                           shift and go to state 9
    sqrt                           shift and go to state 10

state 5

    (26) group_exp -> left_single_exp .
    (14) pb_exp -> left_single_exp . SUP single_exp
    (15) pb_exp -> left_single_exp . SUB single_exp
    (18) pb_exp -> left_single_exp . SUP single_exp SUB single_exp
    (19) pb_exp -> left_single_exp . SUB single_exp SUP single_exp

    LMB             reduce using rule 26 (group_exp -> left_single_exp .)
    RMB             reduce using rule 26 (group_exp -> left_single_exp .)
    LB              reduce using rule 26 (group_exp -> left_single_exp .)
    CHAR            reduce using rule 26 (group_exp -> left_single_exp .)
    FRAC            reduce using rule 26 (group_exp -> left_single_exp .)
    SQRT            reduce using rule 26 (group_exp -> left_single_exp .)
    $end            reduce using rule 26 (group_exp -> left_single_exp .)
    RB              reduce using rule 26 (group_exp -> left_single_exp .)
    SUP             shift and go to state 21
    SUB             shift and go to state 22


state 6

    (27) group_exp -> pb_exp .

    LMB             reduce using rule 27 (group_exp -> pb_exp .)
    RMB             reduce using rule 27 (group_exp -> pb_exp .)
    LB              reduce using rule 27 (group_exp -> pb_exp .)
    CHAR            reduce using rule 27 (group_exp -> pb_exp .)
    FRAC            reduce using rule 27 (group_exp -> pb_exp .)
    SQRT            reduce using rule 27 (group_exp -> pb_exp .)
    $end            reduce using rule 27 (group_exp -> pb_exp .)
    RB              reduce using rule 27 (group_exp -> pb_exp .)


state 7

    (33) right_single_exp -> bound_exp .

    SUP             reduce using rule 33 (right_single_exp -> bound_exp .)
    SUB             reduce using rule 33 (right_single_exp -> bound_exp .)
    LMB             reduce using rule 33 (right_single_exp -> bound_exp .)
    RMB             reduce using rule 33 (right_single_exp -> bound_exp .)
    LB              reduce using rule 33 (right_single_exp -> bound_exp .)
    CHAR            reduce using rule 33 (right_single_exp -> bound_exp .)
    FRAC            reduce using rule 33 (right_single_exp -> bound_exp .)
    SQRT            reduce using rule 33 (right_single_exp -> bound_exp .)
    $end            reduce using rule 33 (right_single_exp -> bound_exp .)
    RB              reduce using rule 33 (right_single_exp -> bound_exp .)


state 8

    (30) left_single_exp -> char .

    SUP             reduce using rule 30 (left_single_exp -> char .)
    SUB             reduce using rule 30 (left_single_exp -> char .)
    LMB             reduce using rule 30 (left_single_exp -> char .)
    RMB             reduce using rule 30 (left_single_exp -> char .)
    LB              reduce using rule 30 (left_single_exp -> char .)
    CHAR            reduce using rule 30 (left_single_exp -> char .)
    FRAC            reduce using rule 30 (left_single_exp -> char .)
    SQRT            reduce using rule 30 (left_single_exp -> char .)
    $end            reduce using rule 30 (left_single_exp -> char .)
    RB              reduce using rule 30 (left_single_exp -> char .)


state 9

    (31) left_single_exp -> frac .

    SUP             reduce using rule 31 (left_single_exp -> frac .)
    SUB             reduce using rule 31 (left_single_exp -> frac .)
    LMB             reduce using rule 31 (left_single_exp -> frac .)
    RMB             reduce using rule 31 (left_single_exp -> frac .)
    LB              reduce using rule 31 (left_single_exp -> frac .)
    CHAR            reduce using rule 31 (left_single_exp -> frac .)
    FRAC            reduce using rule 31 (left_single_exp -> frac .)
    SQRT            reduce using rule 31 (left_single_exp -> frac .)
    $end            reduce using rule 31 (left_single_exp -> frac .)
    RB              reduce using rule 31 (left_single_exp -> frac .)


state 10

    (32) left_single_exp -> sqrt .

    SUP             reduce using rule 32 (left_single_exp -> sqrt .)
    SUB             reduce using rule 32 (left_single_exp -> sqrt .)
    LMB             reduce using rule 32 (left_single_exp -> sqrt .)
    RMB             reduce using rule 32 (left_single_exp -> sqrt .)
    LB              reduce using rule 32 (left_single_exp -> sqrt .)
    CHAR            reduce using rule 32 (left_single_exp -> sqrt .)
    FRAC            reduce using rule 32 (left_single_exp -> sqrt .)
    SQRT            reduce using rule 32 (left_single_exp -> sqrt .)
    $end            reduce using rule 32 (left_single_exp -> sqrt .)
    RB              reduce using rule 32 (left_single_exp -> sqrt .)


state 11

    (34) left_single_exp -> LMB .

    SUP             reduce using rule 34 (left_single_exp -> LMB .)
    SUB             reduce using rule 34 (left_single_exp -> LMB .)
    LMB             reduce using rule 34 (left_single_exp -> LMB .)
    RMB             reduce using rule 34 (left_single_exp -> LMB .)
    LB              reduce using rule 34 (left_single_exp -> LMB .)
    CHAR            reduce using rule 34 (left_single_exp -> LMB .)
    FRAC            reduce using rule 34 (left_single_exp -> LMB .)
    SQRT            reduce using rule 34 (left_single_exp -> LMB .)
    $end            reduce using rule 34 (left_single_exp -> LMB .)
    RB              reduce using rule 34 (left_single_exp -> LMB .)


state 12

    (35) left_single_exp -> RMB .

    SUP             reduce using rule 35 (left_single_exp -> RMB .)
    SUB             reduce using rule 35 (left_single_exp -> RMB .)
    LMB             reduce using rule 35 (left_single_exp -> RMB .)
    RMB             reduce using rule 35 (left_single_exp -> RMB .)
    LB              reduce using rule 35 (left_single_exp -> RMB .)
    CHAR            reduce using rule 35 (left_single_exp -> RMB .)
    FRAC            reduce using rule 35 (left_single_exp -> RMB .)
    SQRT            reduce using rule 35 (left_single_exp -> RMB .)
    $end            reduce using rule 35 (left_single_exp -> RMB .)
    RB              reduce using rule 35 (left_single_exp -> RMB .)


state 13

    (13) bound_exp -> LB . exp RB
    (22) exp -> . group_exp exp
    (23) exp -> . right_single_exp exp
    (24) exp -> . group_exp
    (25) exp -> . right_single_exp
    (26) group_exp -> . left_single_exp
    (27) group_exp -> . pb_exp
    (33) right_single_exp -> . bound_exp
    (30) left_single_exp -> . char
    (31) left_single_exp -> . frac
    (32) left_single_exp -> . sqrt
    (34) left_single_exp -> . LMB
    (35) left_single_exp -> . RMB
    (14) pb_exp -> . left_single_exp SUP single_exp
    (15) pb_exp -> . left_single_exp SUB single_exp
    (16) pb_exp -> . right_single_exp SUP single_exp
    (17) pb_exp -> . right_single_exp SUB single_exp
    (18) pb_exp -> . left_single_exp SUP single_exp SUB single_exp
    (19) pb_exp -> . left_single_exp SUB single_exp SUP single_exp
    (20) pb_exp -> . right_single_exp SUP single_exp SUB single_exp
    (21) pb_exp -> . right_single_exp SUB single_exp SUP single_exp
    (13) bound_exp -> . LB exp RB
    (36) char -> . CHAR
    (2) frac -> . FRAC char char
    (3) frac -> . FRAC bound_exp char
    (4) frac -> . FRAC char bound_exp
    (5) frac -> . FRAC bound_exp bound_exp
    (6) sqrt -> . SQRT char
    (7) sqrt -> . SQRT bound_exp
    (8) sqrt -> . SQRT mb_exp char
    (9) sqrt -> . SQRT mb_exp bound_exp

    LMB             shift and go to state 11
    RMB             shift and go to state 12
    LB              shift and go to state 13
    CHAR            shift and go to state 14
    FRAC            shift and go to state 15
    SQRT            shift and go to state 16

    exp                            shift and go to state 23
    group_exp                      shift and go to state 3
    right_single_exp               shift and go to state 4
    left_single_exp                shift and go to state 5
    pb_exp                         shift and go to state 6
    bound_exp                      shift and go to state 7
    char                           shift and go to state 8
    frac                           shift and go to state 9
    sqrt                           shift and go to state 10

state 14

    (36) char -> CHAR .

    SUP             reduce using rule 36 (char -> CHAR .)
    SUB             reduce using rule 36 (char -> CHAR .)
    LMB             reduce using rule 36 (char -> CHAR .)
    RMB             reduce using rule 36 (char -> CHAR .)
    LB              reduce using rule 36 (char -> CHAR .)
    CHAR            reduce using rule 36 (char -> CHAR .)
    FRAC            reduce using rule 36 (char -> CHAR .)
    SQRT            reduce using rule 36 (char -> CHAR .)
    $end            reduce using rule 36 (char -> CHAR .)
    RB              reduce using rule 36 (char -> CHAR .)


state 15

    (2) frac -> FRAC . char char
    (3) frac -> FRAC . bound_exp char
    (4) frac -> FRAC . char bound_exp
    (5) frac -> FRAC . bound_exp bound_exp
    (36) char -> . CHAR
    (13) bound_exp -> . LB exp RB

    CHAR            shift and go to state 14
    LB              shift and go to state 13

    char                           shift and go to state 24
    bound_exp                      shift and go to state 25

state 16

    (6) sqrt -> SQRT . char
    (7) sqrt -> SQRT . bound_exp
    (8) sqrt -> SQRT . mb_exp char
    (9) sqrt -> SQRT . mb_exp bound_exp
    (36) char -> . CHAR
    (13) bound_exp -> . LB exp RB
    (10) mb_exp -> . LMB chars RMB

    CHAR            shift and go to state 14
    LB              shift and go to state 13
    LMB             shift and go to state 29

    char                           shift and go to state 26
    bound_exp                      shift and go to state 27
    mb_exp                         shift and go to state 28

state 17

    (22) exp -> group_exp exp .

    $end            reduce using rule 22 (exp -> group_exp exp .)
    RB              reduce using rule 22 (exp -> group_exp exp .)


state 18

    (23) exp -> right_single_exp exp .

    $end            reduce using rule 23 (exp -> right_single_exp exp .)
    RB              reduce using rule 23 (exp -> right_single_exp exp .)


state 19

    (16) pb_exp -> right_single_exp SUP . single_exp
    (20) pb_exp -> right_single_exp SUP . single_exp SUB single_exp
    (28) single_exp -> . left_single_exp
    (29) single_exp -> . right_single_exp
    (30) left_single_exp -> . char
    (31) left_single_exp -> . frac
    (32) left_single_exp -> . sqrt
    (34) left_single_exp -> . LMB
    (35) left_single_exp -> . RMB
    (33) right_single_exp -> . bound_exp
    (36) char -> . CHAR
    (2) frac -> . FRAC char char
    (3) frac -> . FRAC bound_exp char
    (4) frac -> . FRAC char bound_exp
    (5) frac -> . FRAC bound_exp bound_exp
    (6) sqrt -> . SQRT char
    (7) sqrt -> . SQRT bound_exp
    (8) sqrt -> . SQRT mb_exp char
    (9) sqrt -> . SQRT mb_exp bound_exp
    (13) bound_exp -> . LB exp RB

    LMB             shift and go to state 11
    RMB             shift and go to state 12
    CHAR            shift and go to state 14
    FRAC            shift and go to state 15
    SQRT            shift and go to state 16
    LB              shift and go to state 13

    right_single_exp               shift and go to state 30
    single_exp                     shift and go to state 31
    left_single_exp                shift and go to state 32
    char                           shift and go to state 8
    frac                           shift and go to state 9
    sqrt                           shift and go to state 10
    bound_exp                      shift and go to state 7

state 20

    (17) pb_exp -> right_single_exp SUB . single_exp
    (21) pb_exp -> right_single_exp SUB . single_exp SUP single_exp
    (28) single_exp -> . left_single_exp
    (29) single_exp -> . right_single_exp
    (30) left_single_exp -> . char
    (31) left_single_exp -> . frac
    (32) left_single_exp -> . sqrt
    (34) left_single_exp -> . LMB
    (35) left_single_exp -> . RMB
    (33) right_single_exp -> . bound_exp
    (36) char -> . CHAR
    (2) frac -> . FRAC char char
    (3) frac -> . FRAC bound_exp char
    (4) frac -> . FRAC char bound_exp
    (5) frac -> . FRAC bound_exp bound_exp
    (6) sqrt -> . SQRT char
    (7) sqrt -> . SQRT bound_exp
    (8) sqrt -> . SQRT mb_exp char
    (9) sqrt -> . SQRT mb_exp bound_exp
    (13) bound_exp -> . LB exp RB

    LMB             shift and go to state 11
    RMB             shift and go to state 12
    CHAR            shift and go to state 14
    FRAC            shift and go to state 15
    SQRT            shift and go to state 16
    LB              shift and go to state 13

    right_single_exp               shift and go to state 30
    single_exp                     shift and go to state 33
    left_single_exp                shift and go to state 32
    char                           shift and go to state 8
    frac                           shift and go to state 9
    sqrt                           shift and go to state 10
    bound_exp                      shift and go to state 7

state 21

    (14) pb_exp -> left_single_exp SUP . single_exp
    (18) pb_exp -> left_single_exp SUP . single_exp SUB single_exp
    (28) single_exp -> . left_single_exp
    (29) single_exp -> . right_single_exp
    (30) left_single_exp -> . char
    (31) left_single_exp -> . frac
    (32) left_single_exp -> . sqrt
    (34) left_single_exp -> . LMB
    (35) left_single_exp -> . RMB
    (33) right_single_exp -> . bound_exp
    (36) char -> . CHAR
    (2) frac -> . FRAC char char
    (3) frac -> . FRAC bound_exp char
    (4) frac -> . FRAC char bound_exp
    (5) frac -> . FRAC bound_exp bound_exp
    (6) sqrt -> . SQRT char
    (7) sqrt -> . SQRT bound_exp
    (8) sqrt -> . SQRT mb_exp char
    (9) sqrt -> . SQRT mb_exp bound_exp
    (13) bound_exp -> . LB exp RB

    LMB             shift and go to state 11
    RMB             shift and go to state 12
    CHAR            shift and go to state 14
    FRAC            shift and go to state 15
    SQRT            shift and go to state 16
    LB              shift and go to state 13

    left_single_exp                shift and go to state 32
    single_exp                     shift and go to state 34
    right_single_exp               shift and go to state 30
    char                           shift and go to state 8
    frac                           shift and go to state 9
    sqrt                           shift and go to state 10
    bound_exp                      shift and go to state 7

state 22

    (15) pb_exp -> left_single_exp SUB . single_exp
    (19) pb_exp -> left_single_exp SUB . single_exp SUP single_exp
    (28) single_exp -> . left_single_exp
    (29) single_exp -> . right_single_exp
    (30) left_single_exp -> . char
    (31) left_single_exp -> . frac
    (32) left_single_exp -> . sqrt
    (34) left_single_exp -> . LMB
    (35) left_single_exp -> . RMB
    (33) right_single_exp -> . bound_exp
    (36) char -> . CHAR
    (2) frac -> . FRAC char char
    (3) frac -> . FRAC bound_exp char
    (4) frac -> . FRAC char bound_exp
    (5) frac -> . FRAC bound_exp bound_exp
    (6) sqrt -> . SQRT char
    (7) sqrt -> . SQRT bound_exp
    (8) sqrt -> . SQRT mb_exp char
    (9) sqrt -> . SQRT mb_exp bound_exp
    (13) bound_exp -> . LB exp RB

    LMB             shift and go to state 11
    RMB             shift and go to state 12
    CHAR            shift and go to state 14
    FRAC            shift and go to state 15
    SQRT            shift and go to state 16
    LB              shift and go to state 13

    left_single_exp                shift and go to state 32
    single_exp                     shift and go to state 35
    right_single_exp               shift and go to state 30
    char                           shift and go to state 8
    frac                           shift and go to state 9
    sqrt                           shift and go to state 10
    bound_exp                      shift and go to state 7

state 23

    (13) bound_exp -> LB exp . RB

    RB              shift and go to state 36


state 24

    (2) frac -> FRAC char . char
    (4) frac -> FRAC char . bound_exp
    (36) char -> . CHAR
    (13) bound_exp -> . LB exp RB

    CHAR            shift and go to state 14
    LB              shift and go to state 13

    char                           shift and go to state 37
    bound_exp                      shift and go to state 38

state 25

    (3) frac -> FRAC bound_exp . char
    (5) frac -> FRAC bound_exp . bound_exp
    (36) char -> . CHAR
    (13) bound_exp -> . LB exp RB

    CHAR            shift and go to state 14
    LB              shift and go to state 13

    bound_exp                      shift and go to state 39
    char                           shift and go to state 40

state 26

    (6) sqrt -> SQRT char .

    SUP             reduce using rule 6 (sqrt -> SQRT char .)
    SUB             reduce using rule 6 (sqrt -> SQRT char .)
    LMB             reduce using rule 6 (sqrt -> SQRT char .)
    RMB             reduce using rule 6 (sqrt -> SQRT char .)
    LB              reduce using rule 6 (sqrt -> SQRT char .)
    CHAR            reduce using rule 6 (sqrt -> SQRT char .)
    FRAC            reduce using rule 6 (sqrt -> SQRT char .)
    SQRT            reduce using rule 6 (sqrt -> SQRT char .)
    $end            reduce using rule 6 (sqrt -> SQRT char .)
    RB              reduce using rule 6 (sqrt -> SQRT char .)


state 27

    (7) sqrt -> SQRT bound_exp .

    SUP             reduce using rule 7 (sqrt -> SQRT bound_exp .)
    SUB             reduce using rule 7 (sqrt -> SQRT bound_exp .)
    LMB             reduce using rule 7 (sqrt -> SQRT bound_exp .)
    RMB             reduce using rule 7 (sqrt -> SQRT bound_exp .)
    LB              reduce using rule 7 (sqrt -> SQRT bound_exp .)
    CHAR            reduce using rule 7 (sqrt -> SQRT bound_exp .)
    FRAC            reduce using rule 7 (sqrt -> SQRT bound_exp .)
    SQRT            reduce using rule 7 (sqrt -> SQRT bound_exp .)
    $end            reduce using rule 7 (sqrt -> SQRT bound_exp .)
    RB              reduce using rule 7 (sqrt -> SQRT bound_exp .)


state 28

    (8) sqrt -> SQRT mb_exp . char
    (9) sqrt -> SQRT mb_exp . bound_exp
    (36) char -> . CHAR
    (13) bound_exp -> . LB exp RB

    CHAR            shift and go to state 14
    LB              shift and go to state 13

    char                           shift and go to state 41
    bound_exp                      shift and go to state 42

state 29

    (10) mb_exp -> LMB . chars RMB
    (11) chars -> . char
    (12) chars -> . char chars
    (36) char -> . CHAR

    CHAR            shift and go to state 14

    chars                          shift and go to state 43
    char                           shift and go to state 44

state 30

    (29) single_exp -> right_single_exp .

    SUB             reduce using rule 29 (single_exp -> right_single_exp .)
    LMB             reduce using rule 29 (single_exp -> right_single_exp .)
    RMB             reduce using rule 29 (single_exp -> right_single_exp .)
    LB              reduce using rule 29 (single_exp -> right_single_exp .)
    CHAR            reduce using rule 29 (single_exp -> right_single_exp .)
    FRAC            reduce using rule 29 (single_exp -> right_single_exp .)
    SQRT            reduce using rule 29 (single_exp -> right_single_exp .)
    $end            reduce using rule 29 (single_exp -> right_single_exp .)
    RB              reduce using rule 29 (single_exp -> right_single_exp .)
    SUP             reduce using rule 29 (single_exp -> right_single_exp .)


state 31

    (16) pb_exp -> right_single_exp SUP single_exp .
    (20) pb_exp -> right_single_exp SUP single_exp . SUB single_exp

    LMB             reduce using rule 16 (pb_exp -> right_single_exp SUP single_exp .)
    RMB             reduce using rule 16 (pb_exp -> right_single_exp SUP single_exp .)
    LB              reduce using rule 16 (pb_exp -> right_single_exp SUP single_exp .)
    CHAR            reduce using rule 16 (pb_exp -> right_single_exp SUP single_exp .)
    FRAC            reduce using rule 16 (pb_exp -> right_single_exp SUP single_exp .)
    SQRT            reduce using rule 16 (pb_exp -> right_single_exp SUP single_exp .)
    $end            reduce using rule 16 (pb_exp -> right_single_exp SUP single_exp .)
    RB              reduce using rule 16 (pb_exp -> right_single_exp SUP single_exp .)
    SUB             shift and go to state 45


state 32

    (28) single_exp -> left_single_exp .

    SUB             reduce using rule 28 (single_exp -> left_single_exp .)
    LMB             reduce using rule 28 (single_exp -> left_single_exp .)
    RMB             reduce using rule 28 (single_exp -> left_single_exp .)
    LB              reduce using rule 28 (single_exp -> left_single_exp .)
    CHAR            reduce using rule 28 (single_exp -> left_single_exp .)
    FRAC            reduce using rule 28 (single_exp -> left_single_exp .)
    SQRT            reduce using rule 28 (single_exp -> left_single_exp .)
    $end            reduce using rule 28 (single_exp -> left_single_exp .)
    RB              reduce using rule 28 (single_exp -> left_single_exp .)
    SUP             reduce using rule 28 (single_exp -> left_single_exp .)


state 33

    (17) pb_exp -> right_single_exp SUB single_exp .
    (21) pb_exp -> right_single_exp SUB single_exp . SUP single_exp

    LMB             reduce using rule 17 (pb_exp -> right_single_exp SUB single_exp .)
    RMB             reduce using rule 17 (pb_exp -> right_single_exp SUB single_exp .)
    LB              reduce using rule 17 (pb_exp -> right_single_exp SUB single_exp .)
    CHAR            reduce using rule 17 (pb_exp -> right_single_exp SUB single_exp .)
    FRAC            reduce using rule 17 (pb_exp -> right_single_exp SUB single_exp .)
    SQRT            reduce using rule 17 (pb_exp -> right_single_exp SUB single_exp .)
    $end            reduce using rule 17 (pb_exp -> right_single_exp SUB single_exp .)
    RB              reduce using rule 17 (pb_exp -> right_single_exp SUB single_exp .)
    SUP             shift and go to state 46


state 34

    (14) pb_exp -> left_single_exp SUP single_exp .
    (18) pb_exp -> left_single_exp SUP single_exp . SUB single_exp

    LMB             reduce using rule 14 (pb_exp -> left_single_exp SUP single_exp .)
    RMB             reduce using rule 14 (pb_exp -> left_single_exp SUP single_exp .)
    LB              reduce using rule 14 (pb_exp -> left_single_exp SUP single_exp .)
    CHAR            reduce using rule 14 (pb_exp -> left_single_exp SUP single_exp .)
    FRAC            reduce using rule 14 (pb_exp -> left_single_exp SUP single_exp .)
    SQRT            reduce using rule 14 (pb_exp -> left_single_exp SUP single_exp .)
    $end            reduce using rule 14 (pb_exp -> left_single_exp SUP single_exp .)
    RB              reduce using rule 14 (pb_exp -> left_single_exp SUP single_exp .)
    SUB             shift and go to state 47


state 35

    (15) pb_exp -> left_single_exp SUB single_exp .
    (19) pb_exp -> left_single_exp SUB single_exp . SUP single_exp

    LMB             reduce using rule 15 (pb_exp -> left_single_exp SUB single_exp .)
    RMB             reduce using rule 15 (pb_exp -> left_single_exp SUB single_exp .)
    LB              reduce using rule 15 (pb_exp -> left_single_exp SUB single_exp .)
    CHAR            reduce using rule 15 (pb_exp -> left_single_exp SUB single_exp .)
    FRAC            reduce using rule 15 (pb_exp -> left_single_exp SUB single_exp .)
    SQRT            reduce using rule 15 (pb_exp -> left_single_exp SUB single_exp .)
    $end            reduce using rule 15 (pb_exp -> left_single_exp SUB single_exp .)
    RB              reduce using rule 15 (pb_exp -> left_single_exp SUB single_exp .)
    SUP             shift and go to state 48


state 36

    (13) bound_exp -> LB exp RB .

    SUP             reduce using rule 13 (bound_exp -> LB exp RB .)
    SUB             reduce using rule 13 (bound_exp -> LB exp RB .)
    LMB             reduce using rule 13 (bound_exp -> LB exp RB .)
    RMB             reduce using rule 13 (bound_exp -> LB exp RB .)
    LB              reduce using rule 13 (bound_exp -> LB exp RB .)
    CHAR            reduce using rule 13 (bound_exp -> LB exp RB .)
    FRAC            reduce using rule 13 (bound_exp -> LB exp RB .)
    SQRT            reduce using rule 13 (bound_exp -> LB exp RB .)
    $end            reduce using rule 13 (bound_exp -> LB exp RB .)
    RB              reduce using rule 13 (bound_exp -> LB exp RB .)


state 37

    (2) frac -> FRAC char char .

    SUP             reduce using rule 2 (frac -> FRAC char char .)
    SUB             reduce using rule 2 (frac -> FRAC char char .)
    LMB             reduce using rule 2 (frac -> FRAC char char .)
    RMB             reduce using rule 2 (frac -> FRAC char char .)
    LB              reduce using rule 2 (frac -> FRAC char char .)
    CHAR            reduce using rule 2 (frac -> FRAC char char .)
    FRAC            reduce using rule 2 (frac -> FRAC char char .)
    SQRT            reduce using rule 2 (frac -> FRAC char char .)
    $end            reduce using rule 2 (frac -> FRAC char char .)
    RB              reduce using rule 2 (frac -> FRAC char char .)


state 38

    (4) frac -> FRAC char bound_exp .

    SUP             reduce using rule 4 (frac -> FRAC char bound_exp .)
    SUB             reduce using rule 4 (frac -> FRAC char bound_exp .)
    LMB             reduce using rule 4 (frac -> FRAC char bound_exp .)
    RMB             reduce using rule 4 (frac -> FRAC char bound_exp .)
    LB              reduce using rule 4 (frac -> FRAC char bound_exp .)
    CHAR            reduce using rule 4 (frac -> FRAC char bound_exp .)
    FRAC            reduce using rule 4 (frac -> FRAC char bound_exp .)
    SQRT            reduce using rule 4 (frac -> FRAC char bound_exp .)
    $end            reduce using rule 4 (frac -> FRAC char bound_exp .)
    RB              reduce using rule 4 (frac -> FRAC char bound_exp .)


state 39

    (5) frac -> FRAC bound_exp bound_exp .

    SUP             reduce using rule 5 (frac -> FRAC bound_exp bound_exp .)
    SUB             reduce using rule 5 (frac -> FRAC bound_exp bound_exp .)
    LMB             reduce using rule 5 (frac -> FRAC bound_exp bound_exp .)
    RMB             reduce using rule 5 (frac -> FRAC bound_exp bound_exp .)
    LB              reduce using rule 5 (frac -> FRAC bound_exp bound_exp .)
    CHAR            reduce using rule 5 (frac -> FRAC bound_exp bound_exp .)
    FRAC            reduce using rule 5 (frac -> FRAC bound_exp bound_exp .)
    SQRT            reduce using rule 5 (frac -> FRAC bound_exp bound_exp .)
    $end            reduce using rule 5 (frac -> FRAC bound_exp bound_exp .)
    RB              reduce using rule 5 (frac -> FRAC bound_exp bound_exp .)


state 40

    (3) frac -> FRAC bound_exp char .

    SUP             reduce using rule 3 (frac -> FRAC bound_exp char .)
    SUB             reduce using rule 3 (frac -> FRAC bound_exp char .)
    LMB             reduce using rule 3 (frac -> FRAC bound_exp char .)
    RMB             reduce using rule 3 (frac -> FRAC bound_exp char .)
    LB              reduce using rule 3 (frac -> FRAC bound_exp char .)
    CHAR            reduce using rule 3 (frac -> FRAC bound_exp char .)
    FRAC            reduce using rule 3 (frac -> FRAC bound_exp char .)
    SQRT            reduce using rule 3 (frac -> FRAC bound_exp char .)
    $end            reduce using rule 3 (frac -> FRAC bound_exp char .)
    RB              reduce using rule 3 (frac -> FRAC bound_exp char .)


state 41

    (8) sqrt -> SQRT mb_exp char .

    SUP             reduce using rule 8 (sqrt -> SQRT mb_exp char .)
    SUB             reduce using rule 8 (sqrt -> SQRT mb_exp char .)
    LMB             reduce using rule 8 (sqrt -> SQRT mb_exp char .)
    RMB             reduce using rule 8 (sqrt -> SQRT mb_exp char .)
    LB              reduce using rule 8 (sqrt -> SQRT mb_exp char .)
    CHAR            reduce using rule 8 (sqrt -> SQRT mb_exp char .)
    FRAC            reduce using rule 8 (sqrt -> SQRT mb_exp char .)
    SQRT            reduce using rule 8 (sqrt -> SQRT mb_exp char .)
    $end            reduce using rule 8 (sqrt -> SQRT mb_exp char .)
    RB              reduce using rule 8 (sqrt -> SQRT mb_exp char .)


state 42

    (9) sqrt -> SQRT mb_exp bound_exp .

    SUP             reduce using rule 9 (sqrt -> SQRT mb_exp bound_exp .)
    SUB             reduce using rule 9 (sqrt -> SQRT mb_exp bound_exp .)
    LMB             reduce using rule 9 (sqrt -> SQRT mb_exp bound_exp .)
    RMB             reduce using rule 9 (sqrt -> SQRT mb_exp bound_exp .)
    LB              reduce using rule 9 (sqrt -> SQRT mb_exp bound_exp .)
    CHAR            reduce using rule 9 (sqrt -> SQRT mb_exp bound_exp .)
    FRAC            reduce using rule 9 (sqrt -> SQRT mb_exp bound_exp .)
    SQRT            reduce using rule 9 (sqrt -> SQRT mb_exp bound_exp .)
    $end            reduce using rule 9 (sqrt -> SQRT mb_exp bound_exp .)
    RB              reduce using rule 9 (sqrt -> SQRT mb_exp bound_exp .)


state 43

    (10) mb_exp -> LMB chars . RMB

    RMB             shift and go to state 49


state 44

    (11) chars -> char .
    (12) chars -> char . chars
    (11) chars -> . char
    (12) chars -> . char chars
    (36) char -> . CHAR

    RMB             reduce using rule 11 (chars -> char .)
    CHAR            shift and go to state 14

    char                           shift and go to state 44
    chars                          shift and go to state 50

state 45

    (20) pb_exp -> right_single_exp SUP single_exp SUB . single_exp
    (28) single_exp -> . left_single_exp
    (29) single_exp -> . right_single_exp
    (30) left_single_exp -> . char
    (31) left_single_exp -> . frac
    (32) left_single_exp -> . sqrt
    (34) left_single_exp -> . LMB
    (35) left_single_exp -> . RMB
    (33) right_single_exp -> . bound_exp
    (36) char -> . CHAR
    (2) frac -> . FRAC char char
    (3) frac -> . FRAC bound_exp char
    (4) frac -> . FRAC char bound_exp
    (5) frac -> . FRAC bound_exp bound_exp
    (6) sqrt -> . SQRT char
    (7) sqrt -> . SQRT bound_exp
    (8) sqrt -> . SQRT mb_exp char
    (9) sqrt -> . SQRT mb_exp bound_exp
    (13) bound_exp -> . LB exp RB

    LMB             shift and go to state 11
    RMB             shift and go to state 12
    CHAR            shift and go to state 14
    FRAC            shift and go to state 15
    SQRT            shift and go to state 16
    LB              shift and go to state 13

    right_single_exp               shift and go to state 30
    single_exp                     shift and go to state 51
    left_single_exp                shift and go to state 32
    char                           shift and go to state 8
    frac                           shift and go to state 9
    sqrt                           shift and go to state 10
    bound_exp                      shift and go to state 7

state 46

    (21) pb_exp -> right_single_exp SUB single_exp SUP . single_exp
    (28) single_exp -> . left_single_exp
    (29) single_exp -> . right_single_exp
    (30) left_single_exp -> . char
    (31) left_single_exp -> . frac
    (32) left_single_exp -> . sqrt
    (34) left_single_exp -> . LMB
    (35) left_single_exp -> . RMB
    (33) right_single_exp -> . bound_exp
    (36) char -> . CHAR
    (2) frac -> . FRAC char char
    (3) frac -> . FRAC bound_exp char
    (4) frac -> . FRAC char bound_exp
    (5) frac -> . FRAC bound_exp bound_exp
    (6) sqrt -> . SQRT char
    (7) sqrt -> . SQRT bound_exp
    (8) sqrt -> . SQRT mb_exp char
    (9) sqrt -> . SQRT mb_exp bound_exp
    (13) bound_exp -> . LB exp RB

    LMB             shift and go to state 11
    RMB             shift and go to state 12
    CHAR            shift and go to state 14
    FRAC            shift and go to state 15
    SQRT            shift and go to state 16
    LB              shift and go to state 13

    right_single_exp               shift and go to state 30
    single_exp                     shift and go to state 52
    left_single_exp                shift and go to state 32
    char                           shift and go to state 8
    frac                           shift and go to state 9
    sqrt                           shift and go to state 10
    bound_exp                      shift and go to state 7

state 47

    (18) pb_exp -> left_single_exp SUP single_exp SUB . single_exp
    (28) single_exp -> . left_single_exp
    (29) single_exp -> . right_single_exp
    (30) left_single_exp -> . char
    (31) left_single_exp -> . frac
    (32) left_single_exp -> . sqrt
    (34) left_single_exp -> . LMB
    (35) left_single_exp -> . RMB
    (33) right_single_exp -> . bound_exp
    (36) char -> . CHAR
    (2) frac -> . FRAC char char
    (3) frac -> . FRAC bound_exp char
    (4) frac -> . FRAC char bound_exp
    (5) frac -> . FRAC bound_exp bound_exp
    (6) sqrt -> . SQRT char
    (7) sqrt -> . SQRT bound_exp
    (8) sqrt -> . SQRT mb_exp char
    (9) sqrt -> . SQRT mb_exp bound_exp
    (13) bound_exp -> . LB exp RB

    LMB             shift and go to state 11
    RMB             shift and go to state 12
    CHAR            shift and go to state 14
    FRAC            shift and go to state 15
    SQRT            shift and go to state 16
    LB              shift and go to state 13

    left_single_exp                shift and go to state 32
    single_exp                     shift and go to state 53
    right_single_exp               shift and go to state 30
    char                           shift and go to state 8
    frac                           shift and go to state 9
    sqrt                           shift and go to state 10
    bound_exp                      shift and go to state 7

state 48

    (19) pb_exp -> left_single_exp SUB single_exp SUP . single_exp
    (28) single_exp -> . left_single_exp
    (29) single_exp -> . right_single_exp
    (30) left_single_exp -> . char
    (31) left_single_exp -> . frac
    (32) left_single_exp -> . sqrt
    (34) left_single_exp -> . LMB
    (35) left_single_exp -> . RMB
    (33) right_single_exp -> . bound_exp
    (36) char -> . CHAR
    (2) frac -> . FRAC char char
    (3) frac -> . FRAC bound_exp char
    (4) frac -> . FRAC char bound_exp
    (5) frac -> . FRAC bound_exp bound_exp
    (6) sqrt -> . SQRT char
    (7) sqrt -> . SQRT bound_exp
    (8) sqrt -> . SQRT mb_exp char
    (9) sqrt -> . SQRT mb_exp bound_exp
    (13) bound_exp -> . LB exp RB

    LMB             shift and go to state 11
    RMB             shift and go to state 12
    CHAR            shift and go to state 14
    FRAC            shift and go to state 15
    SQRT            shift and go to state 16
    LB              shift and go to state 13

    left_single_exp                shift and go to state 32
    single_exp                     shift and go to state 54
    right_single_exp               shift and go to state 30
    char                           shift and go to state 8
    frac                           shift and go to state 9
    sqrt                           shift and go to state 10
    bound_exp                      shift and go to state 7

state 49

    (10) mb_exp -> LMB chars RMB .

    CHAR            reduce using rule 10 (mb_exp -> LMB chars RMB .)
    LB              reduce using rule 10 (mb_exp -> LMB chars RMB .)


state 50

    (12) chars -> char chars .

    RMB             reduce using rule 12 (chars -> char chars .)


state 51

    (20) pb_exp -> right_single_exp SUP single_exp SUB single_exp .

    LMB             reduce using rule 20 (pb_exp -> right_single_exp SUP single_exp SUB single_exp .)
    RMB             reduce using rule 20 (pb_exp -> right_single_exp SUP single_exp SUB single_exp .)
    LB              reduce using rule 20 (pb_exp -> right_single_exp SUP single_exp SUB single_exp .)
    CHAR            reduce using rule 20 (pb_exp -> right_single_exp SUP single_exp SUB single_exp .)
    FRAC            reduce using rule 20 (pb_exp -> right_single_exp SUP single_exp SUB single_exp .)
    SQRT            reduce using rule 20 (pb_exp -> right_single_exp SUP single_exp SUB single_exp .)
    $end            reduce using rule 20 (pb_exp -> right_single_exp SUP single_exp SUB single_exp .)
    RB              reduce using rule 20 (pb_exp -> right_single_exp SUP single_exp SUB single_exp .)


state 52

    (21) pb_exp -> right_single_exp SUB single_exp SUP single_exp .

    LMB             reduce using rule 21 (pb_exp -> right_single_exp SUB single_exp SUP single_exp .)
    RMB             reduce using rule 21 (pb_exp -> right_single_exp SUB single_exp SUP single_exp .)
    LB              reduce using rule 21 (pb_exp -> right_single_exp SUB single_exp SUP single_exp .)
    CHAR            reduce using rule 21 (pb_exp -> right_single_exp SUB single_exp SUP single_exp .)
    FRAC            reduce using rule 21 (pb_exp -> right_single_exp SUB single_exp SUP single_exp .)
    SQRT            reduce using rule 21 (pb_exp -> right_single_exp SUB single_exp SUP single_exp .)
    $end            reduce using rule 21 (pb_exp -> right_single_exp SUB single_exp SUP single_exp .)
    RB              reduce using rule 21 (pb_exp -> right_single_exp SUB single_exp SUP single_exp .)


state 53

    (18) pb_exp -> left_single_exp SUP single_exp SUB single_exp .

    LMB             reduce using rule 18 (pb_exp -> left_single_exp SUP single_exp SUB single_exp .)
    RMB             reduce using rule 18 (pb_exp -> left_single_exp SUP single_exp SUB single_exp .)
    LB              reduce using rule 18 (pb_exp -> left_single_exp SUP single_exp SUB single_exp .)
    CHAR            reduce using rule 18 (pb_exp -> left_single_exp SUP single_exp SUB single_exp .)
    FRAC            reduce using rule 18 (pb_exp -> left_single_exp SUP single_exp SUB single_exp .)
    SQRT            reduce using rule 18 (pb_exp -> left_single_exp SUP single_exp SUB single_exp .)
    $end            reduce using rule 18 (pb_exp -> left_single_exp SUP single_exp SUB single_exp .)
    RB              reduce using rule 18 (pb_exp -> left_single_exp SUP single_exp SUB single_exp .)


state 54

    (19) pb_exp -> left_single_exp SUB single_exp SUP single_exp .

    LMB             reduce using rule 19 (pb_exp -> left_single_exp SUB single_exp SUP single_exp .)
    RMB             reduce using rule 19 (pb_exp -> left_single_exp SUB single_exp SUP single_exp .)
    LB              reduce using rule 19 (pb_exp -> left_single_exp SUB single_exp SUP single_exp .)
    CHAR            reduce using rule 19 (pb_exp -> left_single_exp SUB single_exp SUP single_exp .)
    FRAC            reduce using rule 19 (pb_exp -> left_single_exp SUB single_exp SUP single_exp .)
    SQRT            reduce using rule 19 (pb_exp -> left_single_exp SUB single_exp SUP single_exp .)
    $end            reduce using rule 19 (pb_exp -> left_single_exp SUB single_exp SUP single_exp .)
    RB              reduce using rule 19 (pb_exp -> left_single_exp SUB single_exp SUP single_exp .)

