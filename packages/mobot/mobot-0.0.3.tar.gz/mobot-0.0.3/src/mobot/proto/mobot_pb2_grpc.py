# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import mobot_pb2 as mobot__pb2


class MobotStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AttachBody = channel.unary_unary(
                '/mobot.Mobot/AttachBody',
                request_serializer=mobot__pb2.Empty.SerializeToString,
                response_deserializer=mobot__pb2.Success.FromString,
                )
        self.DetachBody = channel.unary_unary(
                '/mobot.Mobot/DetachBody',
                request_serializer=mobot__pb2.Empty.SerializeToString,
                response_deserializer=mobot__pb2.Success.FromString,
                )
        self.SynchronizeClock = channel.unary_unary(
                '/mobot.Mobot/SynchronizeClock',
                request_serializer=mobot__pb2.TimeOffset.SerializeToString,
                response_deserializer=mobot__pb2.TimeStamp.FromString,
                )
        self.SetChassisMetaData = channel.unary_unary(
                '/mobot.Mobot/SetChassisMetaData',
                request_serializer=mobot__pb2.ChassisMetadata.SerializeToString,
                response_deserializer=mobot__pb2.Success.FromString,
                )
        self.NewOdometryData = channel.unary_unary(
                '/mobot.Mobot/NewOdometryData',
                request_serializer=mobot__pb2.OdometryStamped.SerializeToString,
                response_deserializer=mobot__pb2.Success.FromString,
                )
        self.OdometryDataCallback = channel.unary_unary(
                '/mobot.Mobot/OdometryDataCallback',
                request_serializer=mobot__pb2.Register.SerializeToString,
                response_deserializer=mobot__pb2.Success.FromString,
                )
        self.SetCmdVel = channel.unary_unary(
                '/mobot.Mobot/SetCmdVel',
                request_serializer=mobot__pb2.DiffDriveVelocity.SerializeToString,
                response_deserializer=mobot__pb2.Success.FromString,
                )
        self.GetCmdVel = channel.unary_unary(
                '/mobot.Mobot/GetCmdVel',
                request_serializer=mobot__pb2.Empty.SerializeToString,
                response_deserializer=mobot__pb2.DiffDriveVelocity.FromString,
                )
        self.SetAccelerometerMetaData = channel.unary_unary(
                '/mobot.Mobot/SetAccelerometerMetaData',
                request_serializer=mobot__pb2.SensorMetadata.SerializeToString,
                response_deserializer=mobot__pb2.Success.FromString,
                )
        self.NewAccelerometerData = channel.unary_unary(
                '/mobot.Mobot/NewAccelerometerData',
                request_serializer=mobot__pb2.LinearAccelerationStamped.SerializeToString,
                response_deserializer=mobot__pb2.Success.FromString,
                )
        self.AccelerometerDataCallback = channel.unary_unary(
                '/mobot.Mobot/AccelerometerDataCallback',
                request_serializer=mobot__pb2.Register.SerializeToString,
                response_deserializer=mobot__pb2.Success.FromString,
                )
        self.SetGyroscopeMetaData = channel.unary_unary(
                '/mobot.Mobot/SetGyroscopeMetaData',
                request_serializer=mobot__pb2.SensorMetadata.SerializeToString,
                response_deserializer=mobot__pb2.Success.FromString,
                )
        self.NewGyroscopeData = channel.unary_unary(
                '/mobot.Mobot/NewGyroscopeData',
                request_serializer=mobot__pb2.AngularVelocityStamped.SerializeToString,
                response_deserializer=mobot__pb2.Success.FromString,
                )
        self.GyroscopeDataCallback = channel.unary_unary(
                '/mobot.Mobot/GyroscopeDataCallback',
                request_serializer=mobot__pb2.Register.SerializeToString,
                response_deserializer=mobot__pb2.Success.FromString,
                )
        self.SetMagnetometerMetaData = channel.unary_unary(
                '/mobot.Mobot/SetMagnetometerMetaData',
                request_serializer=mobot__pb2.SensorMetadata.SerializeToString,
                response_deserializer=mobot__pb2.Success.FromString,
                )
        self.NewMagnetometerData = channel.unary_unary(
                '/mobot.Mobot/NewMagnetometerData',
                request_serializer=mobot__pb2.OrientationStamped.SerializeToString,
                response_deserializer=mobot__pb2.Success.FromString,
                )
        self.MagnetometerDataCallback = channel.unary_unary(
                '/mobot.Mobot/MagnetometerDataCallback',
                request_serializer=mobot__pb2.Register.SerializeToString,
                response_deserializer=mobot__pb2.Success.FromString,
                )
        self.SetCameraMetaData = channel.unary_unary(
                '/mobot.Mobot/SetCameraMetaData',
                request_serializer=mobot__pb2.CameraMetadata.SerializeToString,
                response_deserializer=mobot__pb2.Success.FromString,
                )
        self.NewCameraData = channel.unary_unary(
                '/mobot.Mobot/NewCameraData',
                request_serializer=mobot__pb2.CompressedImageStamped.SerializeToString,
                response_deserializer=mobot__pb2.Success.FromString,
                )
        self.CameraDataCallback = channel.unary_unary(
                '/mobot.Mobot/CameraDataCallback',
                request_serializer=mobot__pb2.Register.SerializeToString,
                response_deserializer=mobot__pb2.Success.FromString,
                )


class MobotServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AttachBody(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetachBody(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SynchronizeClock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetChassisMetaData(self, request, context):
        """Chassis RPCs 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewOdometryData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OdometryDataCallback(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetCmdVel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCmdVel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetAccelerometerMetaData(self, request, context):
        """Accelerometer RPCs 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewAccelerometerData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AccelerometerDataCallback(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetGyroscopeMetaData(self, request, context):
        """Gyroscope RPCs 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewGyroscopeData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GyroscopeDataCallback(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetMagnetometerMetaData(self, request, context):
        """Magnetometer RPCs 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewMagnetometerData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MagnetometerDataCallback(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetCameraMetaData(self, request, context):
        """Camera RPCs 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewCameraData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CameraDataCallback(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MobotServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AttachBody': grpc.unary_unary_rpc_method_handler(
                    servicer.AttachBody,
                    request_deserializer=mobot__pb2.Empty.FromString,
                    response_serializer=mobot__pb2.Success.SerializeToString,
            ),
            'DetachBody': grpc.unary_unary_rpc_method_handler(
                    servicer.DetachBody,
                    request_deserializer=mobot__pb2.Empty.FromString,
                    response_serializer=mobot__pb2.Success.SerializeToString,
            ),
            'SynchronizeClock': grpc.unary_unary_rpc_method_handler(
                    servicer.SynchronizeClock,
                    request_deserializer=mobot__pb2.TimeOffset.FromString,
                    response_serializer=mobot__pb2.TimeStamp.SerializeToString,
            ),
            'SetChassisMetaData': grpc.unary_unary_rpc_method_handler(
                    servicer.SetChassisMetaData,
                    request_deserializer=mobot__pb2.ChassisMetadata.FromString,
                    response_serializer=mobot__pb2.Success.SerializeToString,
            ),
            'NewOdometryData': grpc.unary_unary_rpc_method_handler(
                    servicer.NewOdometryData,
                    request_deserializer=mobot__pb2.OdometryStamped.FromString,
                    response_serializer=mobot__pb2.Success.SerializeToString,
            ),
            'OdometryDataCallback': grpc.unary_unary_rpc_method_handler(
                    servicer.OdometryDataCallback,
                    request_deserializer=mobot__pb2.Register.FromString,
                    response_serializer=mobot__pb2.Success.SerializeToString,
            ),
            'SetCmdVel': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCmdVel,
                    request_deserializer=mobot__pb2.DiffDriveVelocity.FromString,
                    response_serializer=mobot__pb2.Success.SerializeToString,
            ),
            'GetCmdVel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCmdVel,
                    request_deserializer=mobot__pb2.Empty.FromString,
                    response_serializer=mobot__pb2.DiffDriveVelocity.SerializeToString,
            ),
            'SetAccelerometerMetaData': grpc.unary_unary_rpc_method_handler(
                    servicer.SetAccelerometerMetaData,
                    request_deserializer=mobot__pb2.SensorMetadata.FromString,
                    response_serializer=mobot__pb2.Success.SerializeToString,
            ),
            'NewAccelerometerData': grpc.unary_unary_rpc_method_handler(
                    servicer.NewAccelerometerData,
                    request_deserializer=mobot__pb2.LinearAccelerationStamped.FromString,
                    response_serializer=mobot__pb2.Success.SerializeToString,
            ),
            'AccelerometerDataCallback': grpc.unary_unary_rpc_method_handler(
                    servicer.AccelerometerDataCallback,
                    request_deserializer=mobot__pb2.Register.FromString,
                    response_serializer=mobot__pb2.Success.SerializeToString,
            ),
            'SetGyroscopeMetaData': grpc.unary_unary_rpc_method_handler(
                    servicer.SetGyroscopeMetaData,
                    request_deserializer=mobot__pb2.SensorMetadata.FromString,
                    response_serializer=mobot__pb2.Success.SerializeToString,
            ),
            'NewGyroscopeData': grpc.unary_unary_rpc_method_handler(
                    servicer.NewGyroscopeData,
                    request_deserializer=mobot__pb2.AngularVelocityStamped.FromString,
                    response_serializer=mobot__pb2.Success.SerializeToString,
            ),
            'GyroscopeDataCallback': grpc.unary_unary_rpc_method_handler(
                    servicer.GyroscopeDataCallback,
                    request_deserializer=mobot__pb2.Register.FromString,
                    response_serializer=mobot__pb2.Success.SerializeToString,
            ),
            'SetMagnetometerMetaData': grpc.unary_unary_rpc_method_handler(
                    servicer.SetMagnetometerMetaData,
                    request_deserializer=mobot__pb2.SensorMetadata.FromString,
                    response_serializer=mobot__pb2.Success.SerializeToString,
            ),
            'NewMagnetometerData': grpc.unary_unary_rpc_method_handler(
                    servicer.NewMagnetometerData,
                    request_deserializer=mobot__pb2.OrientationStamped.FromString,
                    response_serializer=mobot__pb2.Success.SerializeToString,
            ),
            'MagnetometerDataCallback': grpc.unary_unary_rpc_method_handler(
                    servicer.MagnetometerDataCallback,
                    request_deserializer=mobot__pb2.Register.FromString,
                    response_serializer=mobot__pb2.Success.SerializeToString,
            ),
            'SetCameraMetaData': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCameraMetaData,
                    request_deserializer=mobot__pb2.CameraMetadata.FromString,
                    response_serializer=mobot__pb2.Success.SerializeToString,
            ),
            'NewCameraData': grpc.unary_unary_rpc_method_handler(
                    servicer.NewCameraData,
                    request_deserializer=mobot__pb2.CompressedImageStamped.FromString,
                    response_serializer=mobot__pb2.Success.SerializeToString,
            ),
            'CameraDataCallback': grpc.unary_unary_rpc_method_handler(
                    servicer.CameraDataCallback,
                    request_deserializer=mobot__pb2.Register.FromString,
                    response_serializer=mobot__pb2.Success.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mobot.Mobot', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Mobot(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AttachBody(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mobot.Mobot/AttachBody',
            mobot__pb2.Empty.SerializeToString,
            mobot__pb2.Success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DetachBody(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mobot.Mobot/DetachBody',
            mobot__pb2.Empty.SerializeToString,
            mobot__pb2.Success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SynchronizeClock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mobot.Mobot/SynchronizeClock',
            mobot__pb2.TimeOffset.SerializeToString,
            mobot__pb2.TimeStamp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetChassisMetaData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mobot.Mobot/SetChassisMetaData',
            mobot__pb2.ChassisMetadata.SerializeToString,
            mobot__pb2.Success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NewOdometryData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mobot.Mobot/NewOdometryData',
            mobot__pb2.OdometryStamped.SerializeToString,
            mobot__pb2.Success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OdometryDataCallback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mobot.Mobot/OdometryDataCallback',
            mobot__pb2.Register.SerializeToString,
            mobot__pb2.Success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetCmdVel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mobot.Mobot/SetCmdVel',
            mobot__pb2.DiffDriveVelocity.SerializeToString,
            mobot__pb2.Success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCmdVel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mobot.Mobot/GetCmdVel',
            mobot__pb2.Empty.SerializeToString,
            mobot__pb2.DiffDriveVelocity.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetAccelerometerMetaData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mobot.Mobot/SetAccelerometerMetaData',
            mobot__pb2.SensorMetadata.SerializeToString,
            mobot__pb2.Success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NewAccelerometerData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mobot.Mobot/NewAccelerometerData',
            mobot__pb2.LinearAccelerationStamped.SerializeToString,
            mobot__pb2.Success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AccelerometerDataCallback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mobot.Mobot/AccelerometerDataCallback',
            mobot__pb2.Register.SerializeToString,
            mobot__pb2.Success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetGyroscopeMetaData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mobot.Mobot/SetGyroscopeMetaData',
            mobot__pb2.SensorMetadata.SerializeToString,
            mobot__pb2.Success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NewGyroscopeData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mobot.Mobot/NewGyroscopeData',
            mobot__pb2.AngularVelocityStamped.SerializeToString,
            mobot__pb2.Success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GyroscopeDataCallback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mobot.Mobot/GyroscopeDataCallback',
            mobot__pb2.Register.SerializeToString,
            mobot__pb2.Success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetMagnetometerMetaData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mobot.Mobot/SetMagnetometerMetaData',
            mobot__pb2.SensorMetadata.SerializeToString,
            mobot__pb2.Success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NewMagnetometerData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mobot.Mobot/NewMagnetometerData',
            mobot__pb2.OrientationStamped.SerializeToString,
            mobot__pb2.Success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MagnetometerDataCallback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mobot.Mobot/MagnetometerDataCallback',
            mobot__pb2.Register.SerializeToString,
            mobot__pb2.Success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetCameraMetaData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mobot.Mobot/SetCameraMetaData',
            mobot__pb2.CameraMetadata.SerializeToString,
            mobot__pb2.Success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NewCameraData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mobot.Mobot/NewCameraData',
            mobot__pb2.CompressedImageStamped.SerializeToString,
            mobot__pb2.Success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CameraDataCallback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mobot.Mobot/CameraDataCallback',
            mobot__pb2.Register.SerializeToString,
            mobot__pb2.Success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
