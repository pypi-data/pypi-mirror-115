{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "AWS serverless wrapper config schema",
  "description": "this schema is for testing a configuration file used to configure the aws_serverless_wrapper",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "AWS_REGION": {
      "description": "specified region for AWS computing, normally provided by AWS_CONTEXT -> relevant for testing",
      "type": "string",
      "enum": [
        "us-east-1",
        "us-east-2",
        "us-west-1",
        "us-west-2",
        "af-south-1",
        "ap-east-1",
        "ap-south-1",
        "ap-northeast-1",
        "ap-northeast-2",
        "ap-northeast-3",
        "ap-southeast-1",
        "ap-southeast-2",
        "ca-central-1",
        "cn-north-1",
        "cn-northwest-1",
        "eu-central-1",
        "eu-north-1",
        "eu-south-1",
        "eu-west-1",
        "eu-west-2",
        "eu-west-3",
        "me-south-1",
        "sa-east-1"
      ]
    },
    "UnitTest": {
      "description": "only used for flagging a test and not running in actual productive code",
      "type": "boolean"
    },
    "LOG_RAW_EVENT": {
      "description": "log the raw input as provided by AWS",
      "type": "boolean",
      "default": false
    },
    "LOG_PARSED_EVENT": {
      "description": "log the parsed input as provided to the wrapped function",
      "type": "boolean",
      "default": false
    },
    "LOG_PRE_PARSED_RESPONSE": {
      "description": "log the response as it was returned by the wrapped function",
      "type": "boolean",
      "default": false
    },
    "LOG_RAW_RESPONSE": {
      "description": "log the response as it gets returned from AWS to client",
      "type": "boolean",
      "default": false
    },
    "PARSE_BODY": {
      "description": "if parsing the body for request and response shall be done (handles both)",
      "type": "boolean",
      "default": true
    },
    "PARSE_EVENT_BODY": {
      "description": "if parsing the body for request shall be done",
      "type": "boolean",
      "default": true
    },
    "PARSE_RESPONSE_BODY": {
      "description": "if parsing the body for response shall be done",
      "type": "boolean",
      "default": true
    },
    "with_context": {
      "description": "if the aws context shall be passed on into the function",
      "type": "boolean",
      "default": false
    },
    "API_INPUT_VERIFICATION": {
      "description": "if input verification from API call shall be considered (e.g. for ReST calls)",
      "oneOf": [
        {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "SCHEMA_ORIGIN": {
              "$ref": "wrapper_config_schema.json#/definitions/schemas/properties/origin"
            },
            "SCHEMA_DIRECTORY": {
              "$ref": "wrapper_config_schema.json#/definitions/schemas/properties/directory"
            },
            "LOG_ERRORS": {
              "description": "if failed validations shall be logged",
              "$ref": "wrapper_config_schema.json#/definitions/error_log_config"
            }
          }
        },
        {
          "type": "boolean",
          "enum": [
            false
          ]
        }
      ]
    },
    "API_RESPONSE_VERIFICATION": {
      "description": "if the response from API call shall be checked for fitting response schema (e.g. for ensuring returning correct data)",
      "oneOf": [
        {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "SCHEMA_ORIGIN": {
              "$ref": "wrapper_config_schema.json#/definitions/schemas/properties/origin"
            },
            "SCHEMA_DIRECTORY": {
              "$ref": "wrapper_config_schema.json#/definitions/schemas/properties/directory"
            },
            "RETURN_INTERNAL_SERVER_ERROR": {
              "description": "if set to true, a missing  (4xx and 5xx statusCodes are excluded and will always be returned)",
              "type": "boolean",
              "default": false
            }
          }
        },
        {
          "type": "boolean",
          "enum": [
            false
          ]
        }
      ]
    },
    "ERROR_LOG": {
      "description": "how shall internal errors be logged?",
      "$ref": "wrapper_config_schema.json#/definitions/error_log_config"
    }
  },
  "definitions": {
    "schemas": {
      "type": "object",
      "properties": {
        "origin": {
          "description": "if a schema validation over data shall be done, where does the schema originate from?\nfile: load schema from a directory\nurl: load schema from a url\nraw: provide the schema directly in this file (or if you access the class handling the validation directly, passing the schema directly to the class",
          "type": "string",
          "enum": [
            "file",
            "url",
            "raw"
          ]
        },
        "directory": {
          "description": "the file_path or url of the directory containing the schemas",
          "type": "string",
          "pattern": "[0-9a-zA-Z\/.]*(\/|.json)$"
        }
      }
    },
    "error_log_config": {
      "description": "basic configuration for logging errors",
      "type": "object",
      "anyOf": [
        {
          "QUEUE": {
            "description": "if error log shall be put to a queue, specify queue name here (without stage name)",
            "type": "string"
          }
        },
        {
          "DATABASE": {
            "description": "if error log shall be inserted into a database, specify database type and name here (without stage name)",
            "type": "object",
            "properties": {
              "noSQL": {
                "type": "string"
              },
              "SQL": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "API_RESPONSE": {
            "description": "if error log shall be returned in request response",
            "type": "boolean"
          }
        },
        {
          "LOG_EVENT_DATA": {
            "description": "if the event data shall be contained in the error log",
            "type": "boolean"
          }
        }
      ]
    }
  },
  "dependencies": {
    "LOG_PARSED_EVENT": {
      "properties": {
        "PARSE_BODY": {
          "const": true
        },
        "PARSE_EVENT_BODY": {
          "const": true
        }
      }
    },
    "LOG_PRE_PARSED_RESPONSE": {
      "properties": {
        "PARSE_BODY": {
          "const": true
        },
        "PARSE_RESPONSE_BODY": {
          "const": true
        }
      }
    }
  }
}