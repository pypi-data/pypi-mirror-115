{"version":3,"file":"lib_index_js.0f9a471ecd9e04295c17.js","mappings":";;;;;;;;;;;;;;;;;AAA+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;AClCuG;AAChE;AACvC;AACO;AACP;AACA;AACA,kBAAkB;AAClB,6BAA6B,oDAAU;AACvC;AACA;AACA,yEAAyE,KAAK,EAAE;AAChF;AACA;AACA,sEAAsE;AACtE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA,iBAAiB;AACjB,sEAAsE;AACtE;AACA,qCAAqC,oDAAU,SAAS,4CAA4C;AACpG;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iHAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://@educational-technology-collective/etc_jupyterlab_telemetry_coursera/./lib/handler.js","webpack://@educational-technology-collective/etc_jupyterlab_telemetry_coursera/./lib/index.js"],"sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'etc-jupyterlab-telemetry-coursera', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { INotebookEvent } from \"@educational-technology-collective/etc_jupyterlab_telemetry_extension\";\nimport { requestAPI } from './handler';\nconst PLUGIN_ID = '@educational-technology-collective/etc_jupyterlab_telemetry_coursera:plugin';\nexport class AWSAPIGatewayAdapter {\n    constructor() {\n        this._userId = (async () => {\n            try { // to get the user id.\n                return await requestAPI(\"id\");\n            }\n            catch (e) {\n                console.error(`Error on GET /etc_jupyterlab_telemetry/id}.\\n${e}`);\n                return \"UNDEFINED\";\n            }\n            //  This request is specific to the Coursera environment; hence, it may not be relevant in other contexts.\n            //  The request for the `id` resource will return the value of the WORKSPACE_ID environment variable that is assigned on the server.\n        })();\n    }\n    adaptMessage(sender, data) {\n        (async () => {\n            try {\n                //\n                data = Object.assign(Object.assign({}, data), {\n                    user_id: await this._userId\n                });\n                //  The user id is not a characteristic of the event; hence, it is added late. \n                console.log(data);\n                let response = await requestAPI(\"s3\", { method: \"POST\", body: JSON.stringify(data) });\n                console.log(response);\n            }\n            catch (e) {\n                console.error(e);\n            }\n        })();\n    }\n}\n/**\n * Initialization data for the @educational-technology-collective/etc_jupyterlab_telemetry_coursera extension.\n */\nconst plugin = {\n    id: PLUGIN_ID,\n    autoStart: true,\n    requires: [INotebookEvent],\n    activate: (app, notebookEvent) => {\n        console.log('JupyterLab extension @educational-technology-collective/etc_jupyterlab_telemetry_coursera is activated!');\n        let messageAdapter = new AWSAPIGatewayAdapter();\n        notebookEvent.notebookSaved.connect(messageAdapter.adaptMessage, messageAdapter);\n        notebookEvent.activeCellChanged.connect(messageAdapter.adaptMessage, messageAdapter);\n        notebookEvent.cellAdded.connect(messageAdapter.adaptMessage, messageAdapter);\n        notebookEvent.cellExecuted.connect(messageAdapter.adaptMessage, messageAdapter);\n        notebookEvent.cellRemoved.connect(messageAdapter.adaptMessage, messageAdapter);\n        notebookEvent.notebookOpened.connect(messageAdapter.adaptMessage, messageAdapter);\n        notebookEvent.notebookScrolled.connect(messageAdapter.adaptMessage, messageAdapter);\n    }\n};\nexport default plugin;\n"],"names":[],"sourceRoot":""}