# This code is part of Qiskit.
#
# (C) Copyright IBM 2021.
#
# This code is licensed under the Apache License, Version 2.0. You may
# obtain a copy of this license in the LICENSE.txt file in the root directory
# of this source tree or at http://www.apache.org/licenses/LICENSE-2.0.
#
# Any modifications or derivative works of this code must retain this
# copyright notice, and modified files need to carry a notice indicating
# that they have been altered from the originals.

"""
Curve data classes.
"""

import dataclasses
from typing import Any, Dict, Callable, Union, List, Tuple, Optional
import numpy as np

from qiskit_experiments.framework import FitVal


@dataclasses.dataclass(frozen=True)
class SeriesDef:
    """Description of curve."""

    # Arbitrary callback to define the fit function. First argument should be x.
    fit_func: Callable

    # Keyword dictionary to define the series with circuit metadata
    filter_kwargs: Dict[str, Any] = dataclasses.field(default_factory=dict)

    # Name of this series. This name will appear in the figure and raw x-y value report.
    name: str = "Series-0"

    # Color of this line.
    plot_color: str = "black"

    # Symbol to represent data points of this line.
    plot_symbol: str = "o"

    # Whether to plot fit uncertainty for this line.
    plot_fit_uncertainty: bool = False


@dataclasses.dataclass(frozen=True)
class CurveData:
    """Set of extracted experiment data."""

    # Name of this data set
    label: str

    # X data
    x: np.ndarray

    # Y data (measured data)
    y: np.ndarray

    # Error bar
    y_err: np.ndarray

    # Maping of data index to series index
    data_index: Union[np.ndarray, int]

    # Metadata associated with each data point. Generated from the circuit metadata.
    metadata: np.ndarray = None


@dataclasses.dataclass(frozen=True)
class FitData:
    """Set of data generated by the fit function."""

    # Order sensitive fit parameter values
    popt: np.ndarray

    # Order sensitive parameter name list
    popt_keys: List[str]

    # Order sensitive fit parameter uncertainty
    popt_err: np.ndarray

    # Covariance matrix
    pcov: np.ndarray

    # Reduced Chi-squared value of fit curve
    reduced_chisq: float

    # Degree of freedom
    dof: int

    # X data range
    x_range: Tuple[float, float]

    # Y data range
    y_range: Tuple[float, float]

    def fitval(self, key: str, unit: Optional[str] = None) -> FitVal:
        """A helper method to get fit value object from parameter key name.

        Args:
            key: Name of parameters to extract.
            unit: Optional. Unit of this value.

        Returns:
            FitVal object.

        Raises:
            ValueError: When specified parameter is not defined.
        """
        try:
            index = self.popt_keys.index(key)
            return FitVal(
                value=self.popt[index],
                stderr=self.popt_err[index],
                unit=unit,
            )
        except ValueError as ex:
            raise ValueError(f"Parameter {key} is not defined.") from ex


@dataclasses.dataclass
class ParameterRepr:
    """Detailed description of fitting parameter."""

    # Fitter argument name
    name: str

    # Unicode representation
    repr: Optional[str] = None

    # Unit
    unit: Optional[str] = None
