# coding: utf-8

"""
    Cythereal Dashboard API

     The API used exclusively by the MAGIC Dashboard for populating charts, graphs, tables, etc... on the dashboard.  # API Conventions  **All responses** MUST be of type `APIResponse` and contain the following fields:  * `api_version` |  The current api version * `success` | Boolean value indicating if the operation succeeded. * `code` | Status code. Typically corresponds to the HTTP status code.  * `message` | A human readable message providing more details about the operation. Can be null or empty.  **Successful operations** MUST return a `SuccessResponse`, which extends `APIResponse` by adding:  * `data` | Properties containing the response object. * `success` | MUST equal True  When returning objects from a successful response, the `data` object SHOULD contain a property named after the requested object type. For example, the `/alerts` endpoint should return a response object with `data.alerts`. This property SHOULD  contain a list of the returned objects. For the `/alerts` endpoint, the `data.alerts` property contains a list of MagicAlerts objects. See the `/alerts` endpoint documentation for an example.  **Failed Operations** MUST return an `ErrorResponse`, which extends `APIResponse` by adding:  * `success` | MUST equal False.   # noqa: E501

    OpenAPI spec version: 0.32.2
    Contact: support@cythereal.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InfoCountsResponseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'archives': 'FileCount',
        'binaries': 'FileCount',
        'documents': 'FileCount',
        'emails': 'FileCount',
        'files': 'FileCount',
        'html': 'FileCount',
        'images': 'FileCount',
        'iocs': 'FileCount',
        'macros': 'FileCount',
        'pdfs': 'FileCount',
        'unhandled': 'FileCount'
    }

    attribute_map = {
        'archives': 'archives',
        'binaries': 'binaries',
        'documents': 'documents',
        'emails': 'emails',
        'files': 'files',
        'html': 'html',
        'images': 'images',
        'iocs': 'iocs',
        'macros': 'macros',
        'pdfs': 'pdfs',
        'unhandled': 'unhandled'
    }

    def __init__(self, archives=None, binaries=None, documents=None, emails=None, files=None, html=None, images=None, iocs=None, macros=None, pdfs=None, unhandled=None):  # noqa: E501
        """InfoCountsResponseData - a model defined in Swagger"""  # noqa: E501

        self._archives = None
        self._binaries = None
        self._documents = None
        self._emails = None
        self._files = None
        self._html = None
        self._images = None
        self._iocs = None
        self._macros = None
        self._pdfs = None
        self._unhandled = None
        self.discriminator = None

        if archives is not None:
            self.archives = archives
        if binaries is not None:
            self.binaries = binaries
        if documents is not None:
            self.documents = documents
        if emails is not None:
            self.emails = emails
        if files is not None:
            self.files = files
        if html is not None:
            self.html = html
        if images is not None:
            self.images = images
        if iocs is not None:
            self.iocs = iocs
        if macros is not None:
            self.macros = macros
        if pdfs is not None:
            self.pdfs = pdfs
        if unhandled is not None:
            self.unhandled = unhandled

    @property
    def archives(self):
        """Gets the archives of this InfoCountsResponseData.  # noqa: E501


        :return: The archives of this InfoCountsResponseData.  # noqa: E501
        :rtype: FileCount
        """
        return self._archives

    @archives.setter
    def archives(self, archives):
        """Sets the archives of this InfoCountsResponseData.


        :param archives: The archives of this InfoCountsResponseData.  # noqa: E501
        :type: FileCount
        """

        self._archives = archives

    @property
    def binaries(self):
        """Gets the binaries of this InfoCountsResponseData.  # noqa: E501


        :return: The binaries of this InfoCountsResponseData.  # noqa: E501
        :rtype: FileCount
        """
        return self._binaries

    @binaries.setter
    def binaries(self, binaries):
        """Sets the binaries of this InfoCountsResponseData.


        :param binaries: The binaries of this InfoCountsResponseData.  # noqa: E501
        :type: FileCount
        """

        self._binaries = binaries

    @property
    def documents(self):
        """Gets the documents of this InfoCountsResponseData.  # noqa: E501


        :return: The documents of this InfoCountsResponseData.  # noqa: E501
        :rtype: FileCount
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this InfoCountsResponseData.


        :param documents: The documents of this InfoCountsResponseData.  # noqa: E501
        :type: FileCount
        """

        self._documents = documents

    @property
    def emails(self):
        """Gets the emails of this InfoCountsResponseData.  # noqa: E501


        :return: The emails of this InfoCountsResponseData.  # noqa: E501
        :rtype: FileCount
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this InfoCountsResponseData.


        :param emails: The emails of this InfoCountsResponseData.  # noqa: E501
        :type: FileCount
        """

        self._emails = emails

    @property
    def files(self):
        """Gets the files of this InfoCountsResponseData.  # noqa: E501


        :return: The files of this InfoCountsResponseData.  # noqa: E501
        :rtype: FileCount
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this InfoCountsResponseData.


        :param files: The files of this InfoCountsResponseData.  # noqa: E501
        :type: FileCount
        """

        self._files = files

    @property
    def html(self):
        """Gets the html of this InfoCountsResponseData.  # noqa: E501


        :return: The html of this InfoCountsResponseData.  # noqa: E501
        :rtype: FileCount
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this InfoCountsResponseData.


        :param html: The html of this InfoCountsResponseData.  # noqa: E501
        :type: FileCount
        """

        self._html = html

    @property
    def images(self):
        """Gets the images of this InfoCountsResponseData.  # noqa: E501


        :return: The images of this InfoCountsResponseData.  # noqa: E501
        :rtype: FileCount
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this InfoCountsResponseData.


        :param images: The images of this InfoCountsResponseData.  # noqa: E501
        :type: FileCount
        """

        self._images = images

    @property
    def iocs(self):
        """Gets the iocs of this InfoCountsResponseData.  # noqa: E501


        :return: The iocs of this InfoCountsResponseData.  # noqa: E501
        :rtype: FileCount
        """
        return self._iocs

    @iocs.setter
    def iocs(self, iocs):
        """Sets the iocs of this InfoCountsResponseData.


        :param iocs: The iocs of this InfoCountsResponseData.  # noqa: E501
        :type: FileCount
        """

        self._iocs = iocs

    @property
    def macros(self):
        """Gets the macros of this InfoCountsResponseData.  # noqa: E501


        :return: The macros of this InfoCountsResponseData.  # noqa: E501
        :rtype: FileCount
        """
        return self._macros

    @macros.setter
    def macros(self, macros):
        """Sets the macros of this InfoCountsResponseData.


        :param macros: The macros of this InfoCountsResponseData.  # noqa: E501
        :type: FileCount
        """

        self._macros = macros

    @property
    def pdfs(self):
        """Gets the pdfs of this InfoCountsResponseData.  # noqa: E501


        :return: The pdfs of this InfoCountsResponseData.  # noqa: E501
        :rtype: FileCount
        """
        return self._pdfs

    @pdfs.setter
    def pdfs(self, pdfs):
        """Sets the pdfs of this InfoCountsResponseData.


        :param pdfs: The pdfs of this InfoCountsResponseData.  # noqa: E501
        :type: FileCount
        """

        self._pdfs = pdfs

    @property
    def unhandled(self):
        """Gets the unhandled of this InfoCountsResponseData.  # noqa: E501


        :return: The unhandled of this InfoCountsResponseData.  # noqa: E501
        :rtype: FileCount
        """
        return self._unhandled

    @unhandled.setter
    def unhandled(self, unhandled):
        """Sets the unhandled of this InfoCountsResponseData.


        :param unhandled: The unhandled of this InfoCountsResponseData.  # noqa: E501
        :type: FileCount
        """

        self._unhandled = unhandled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InfoCountsResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InfoCountsResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
